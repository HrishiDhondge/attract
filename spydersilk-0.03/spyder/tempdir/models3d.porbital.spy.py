
class POrbital(ThreeDee):
  """Spyder-generated class

 module spyder.modules.models3d
 file 'porbital.spy'


----------------------------------------------------------------------
Spyder definition:

Type POrbital(ThreeDee) {
  Float rx
  Float ry
  Float rrx
  Float rry
  Integer planesegments
  Integer rotationsegments
  AxisSystem axis = AxisSystem()
  validate {
    assert rx > 0
    assert ry > 0
    assert rrx >= 0
    assert rry >= 0
    assert planesegments >= 2
    assert rotationsegments >= 2
  }
  form {
    self.matrix = "axis"
    rx.default = 1
    rx.min = 0.01
    rx.max = 5
    ry.default = 1
    ry.min = 0.01
    ry.max = 5
    rrx.default = 1
    rrx.min = 0
    rrx.max = 5
    rry.default = 1
    rry.min = 0
    rry.max = 5
    planesegments.default = 8
    planesegments.min = 2
    planesegments.max = 100
    rotationsegments.default = 8
    rotationsegments.min = 2
    rotationsegments.max = 100
  }
}

----------------------------------------------------------------------
"""
  
  @staticmethod
  def typename():
    """Auto-generated by Spyder:
     module core
     file class.py
     function generate_class
    Return the class name of the current object"""
    return "POrbital"
  def cast(self, othertype):
    """Auto-generated by Spyder:
     module core
     file class.py
     function generate_class
    Return an object of the type "othertype" initialized from this object"""
    if type(othertype) == type(int): return othertype(self)    
    return globals()[othertype](self)

  __constructor__ = "constructor_fromany" #Auto-generated by Spyder
  __defaultconstructor__ = __constructor__ #Auto-generated by Spyder
  def constructor_empty(self):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    Empty constructor, all members must be assigned manually afterwards"""    
  def constructor_fromlist(self, *args, **args2):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    List constructor"""        
    errorpath = []
    errorpath[:] = spyder.errorpath[:]    
    try:
      a = self.__unpack__(*args[0])
      self.__construct__ (*a)
    except AssertionError as e: 
      e.__context__ = None
      spyder.errorpath[:] = errorpath[:]
      raise e   
    except Exception as e:
      e.__context__ = None
      spyder.errorpath[:] = errorpath[:]
      err = str(e)
      exc = "An error has occurred in the construction of a POrbital object"      
      if isinstance(e, spyder.ConstructionError):
        raise spyder.ConstructionError(spyder.exception(exc + "\n" + err))
      else:
        raise spyder.ConstructionError(exc + spyder.exception())            
    self.validate()      
  def constructor_fromdict(self, dic):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    Dict constructor"""           
    errorpath = []
    errorpath[:] = spyder.errorpath[:]
    try:
      a = self.__copydict__(dic)
      self.__construct__ (*a) 
    except AssertionError as e: 
      e.__context__ = None
      spyder.errorpath[:] = errorpath[:]
      raise         
    except Exception as e:
      e.__context__ = None
      spyder.errorpath[:] = errorpath[:]
      err = str(e)
      exc = "An error has occurred in the construction of a POrbital object"      
      if isinstance(e, spyder.ConstructionError): 
        raise spyder.ConstructionError(spyder.exception(exc + "\n" + err))
      else:
        raise spyder.ConstructionError(exc + spyder.exception())        
    self.validate()
 
  def __init__(self,*args, **args2):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    Init function, calls the general constructor (fromany by default)"""            
    POrbital.__dict__[POrbital.__constructor__](self, *args, **args2)
  def constructor_fromany(self,*args, **args2):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    General constructor for the current class
    This function tries five specialized constructors in this order:
    - Copy constructor
    - Dict constructor
    - Value/Keyword constructor
    - Parsing constructor
    - List constructor
    For more information, see the Spyder documentation"""

    errorpath = []
    errorpath[:] = spyder.errorpath[:]
    raise_exc = None
    try:
      exc = "An error has occurred in the construction of a POrbital object"
      exc += "\nNumber of arguments: value %d, keyword %d\n" % (len(args), len(args2))
      try:
        construct = -1
        try:
          if len(args) > 1 or len(args2) > 0: raise IndexError
          a = self.__spydercopy__(args[0]) #func(func(a,b,c))
        except AssertionError as e: 
          e.__context__ = None
          spyder.errorpath[:] = errorpath[:]
          raise e
        except Exception as e:
          if len(args) > 1 or len(args2) > 0: raise IndexError
          exc += "\n*** (POrbital) Copy constructor ***"+ spyder.exception(newline=True)
          e.__context__ = None
          spyder.errorpath[:] = errorpath[:]
          try:
            a = self.__copydict__(args[0]) #func({a:1,b:2,c:3})
          except Exception as e:          
            exc += "\n*** (POrbital) Dict constructor ***"+ spyder.exception(newline=True)
            e.__context__ = None
            spyder.errorpath[:] = errorpath[:]
            raise e
          else:
            construct = 2
        else:
          construct = 1              
        self.__construct__ (*a)
      except AssertionError as e: 
        e.__context__ = None
        spyder.errorpath[:] = errorpath[:]
        raise e
      except Exception as e:
        e.__context__ = None
        spyder.errorpath[:] = errorpath[:]
        if not (len(args) > 1 or len(args2) > 0):
          if construct == 1: exc += "\n*** (POrbital) Copy constructor ***" + spyder.exception(newline=True)
          if construct == 2: exc += "\n*** (POrbital) Dict constructor ***" + spyder.exception(newline=True)
        try:
          if len(args) == 1 and len(args2) == 0 and isinstance(args[0], str):
            if args[0].startswith("POrbital") and args[0][len("POrbital"):].lstrip()[0] == "(":
              spyder.errorpath[:] = errorpath[:]  
              raise TypeError
          a = self.__unpack__(*args, **args2) #func(a,b,c)
          self.__construct__ (*a) ##
        except AssertionError as e: 
          e.__context__ = None
          spyder.errorpath[:] = errorpath[:]
          raise e
        except Exception as e:
          exc += "\n*** (POrbital) Value/Keyword constructor ***" + spyder.exception(newline=True)
          e.__context__ = None
          spyder.errorpath[:] = errorpath[:]
          if len(args) > 1 or len(args2) > 0 : raise e        
          try:
            a = self.__parse__(args[0]) #func("[a,b,c]")
            if a == None: return
            self.__construct__ (*a)
          except AssertionError as e: 
            e.__context__ = None
            spyder.errorpath[:] = errorpath[:]
            raise e
          except Exception as e:
            exc += "\n*** (POrbital) Parsing constructor ***" + spyder.exception(newline=True)
            e.__context__ = None
            spyder.errorpath[:] = errorpath[:]
            try:
              a = self.__unpack__(*args[0]) #func([a,b,c])
              self.__construct__ (*a)
            except Exception as e:              
              exc += "\n*** (POrbital) List constructor ***" + spyder.exception(newline=True)
              e.__context__ = None
              spyder.errorpath[:] = errorpath[:]
              raise spyder.ConstructionError
    except AssertionError as err:      
      spyder.errorpath[:] = errorpath[:]      
      raise_exc = str(err)          
      exctyp = type(err)
    except spyder.ConstructionError as err:      
      spyder.errorpath[:] = errorpath[:]
      raise_exc = exc
      exctyp = type(err)
    except Exception as err:      
      spyder.errorpath[:] = errorpath[:]      
      raise_exc = exc+'\n'+str(err)
      exctyp = spyder.ConstructionError
    if raise_exc: 
      raise exctyp(spyder.exception(raise_exc))
    self.validate()
    return self

  @classmethod
  def _typetree(cls): 
    """Auto-generated by Spyder:
     module core
     file typetree.py
     function typetree
    Returns the typetree of the Spyder class"""          
    spyder.core.build_members(cls.typename(),cls)
    return spyder.core.get_typetreedict(cls.typename())
  def __construct__ (self, rx,ry,rrx,rry,planesegments,rotationsegments,axis):
    """Auto-generated by Spyder:
     module core
     file construct.py
     function generate_construct
    General private constructor, for internal use only""" 
    if self.__constructor__ == self.__defaultconstructor__:
      reconstruct = spyder.core.reconstruct_std
      reconstruct_default = spyder.core.reconstruct_std  
    else:
       reconstruct = spyder.core.reconstruct
       reconstruct_default = spyder.core.reconstruct_std
    try:
      self.rx = reconstruct(self, Float,"rx",rx)
    except Exception as exc:
      exc.__context__ = None; raise
    try:
      self.ry = reconstruct(self, Float,"ry",ry)
    except Exception as exc:
      exc.__context__ = None; raise
    try:
      self.rrx = reconstruct(self, Float,"rrx",rrx)
    except Exception as exc:
      exc.__context__ = None; raise
    try:
      self.rry = reconstruct(self, Float,"rry",rry)
    except Exception as exc:
      exc.__context__ = None; raise
    try:
      self.planesegments = reconstruct(self, Integer,"planesegments",planesegments)
    except Exception as exc:
      exc.__context__ = None; raise
    try:
      self.rotationsegments = reconstruct(self, Integer,"rotationsegments",rotationsegments)
    except Exception as exc:
      exc.__context__ = None; raise
    reconstruct_func = reconstruct 
    default0 = self.__unpack2__.__defaults__[0] if spyder.python3 else self.__unpack2__.func_defaults[0]
    if axis is default0 or (axis.__class__ is default0.__class__ and axis == default0):      reconstruct_func = reconstruct_default
    try:
      self.axis = reconstruct_func(self, AxisSystem,"axis",axis)
    except Exception as exc:
      exc.__context__ = None; raise
  def __unpack__(self,*args, **kwargs): 
    """Auto-generated by Spyder:
     module core
     file unpack.py
     function generate_unpack
    Private list/value/keyword constructor, for internal use only"""  
    try:
      return self.__unpack2__(*args, **kwargs)
    except TypeError as e:
      e.__context__ = None
      requiredmembers = ("rx","ry","rrx","rry","planesegments","rotationsegments")
      missingmembers = []
      for n in range(len(args),len(requiredmembers)):
        member = requiredmembers[n]
        if member not in kwargs: missingmembers.append(member)
      raise spyder.ConstructionError("Missing arguments: %s" %  missingmembers)
    
  def __unpack2__(self,rx,ry,rrx,rry,planesegments,rotationsegments,axis=AxisSystem(),*_bogusargs, **_boguskwargs): 
    """Auto-generated by Spyder:
     module core
     file unpack.py
     function generate_unpack
    Private list/value/keyword constructor, for internal use only"""
    return rx,ry,rrx,rry,planesegments,rotationsegments,axis
  def __spydercopy__(self,_a):
    """Auto-generated by Spyder:
     module core
     file copy.py
     function generate_copy
    Private copy constructor, for internal use only"""
    _missing_members = []
    try:
      rx = _a.rx
    except AttributeError:
      _missing_members.append('rx')
    try:
      ry = _a.ry
    except AttributeError:
      _missing_members.append('ry')
    try:
      rrx = _a.rrx
    except AttributeError:
      _missing_members.append('rrx')
    try:
      rry = _a.rry
    except AttributeError:
      _missing_members.append('rry')
    try:
      planesegments = _a.planesegments
    except AttributeError:
      _missing_members.append('planesegments')
    try:
      rotationsegments = _a.rotationsegments
    except AttributeError:
      _missing_members.append('rotationsegments')
    axis = AxisSystem()
    if hasattr(_a,"axis") and _a.axis != None: axis = _a.axis
    if len(_missing_members): raise spyder.ConstructionError("Object '%s' has missing attributes: %s" % (type(_a).__name__, _missing_members) )
    if hasattr(_a, "__conversionstack__"): self.__conversionstack__ = _a.__conversionstack__
    return (rx,ry,rrx,rry,planesegments,rotationsegments,axis,)
  def __copydict__(self,_a):
    """Auto-generated by Spyder:
     module core
     file copy.py
     function generate_copydict
    Private dict constructor, for internal use only"""
    _missing_members = []
    try:
      rx = _a['rx']
    except KeyError:
      _missing_members.append('rx')
    except TypeError:
      raise spyder.ConstructionError("Object '%s' does not have keys" % type(_a).__name__)
    try:
      ry = _a['ry']
    except KeyError:
      _missing_members.append('ry')
    except TypeError:
      raise spyder.ConstructionError("Object '%s' does not have keys" % type(_a).__name__)
    try:
      rrx = _a['rrx']
    except KeyError:
      _missing_members.append('rrx')
    except TypeError:
      raise spyder.ConstructionError("Object '%s' does not have keys" % type(_a).__name__)
    try:
      rry = _a['rry']
    except KeyError:
      _missing_members.append('rry')
    except TypeError:
      raise spyder.ConstructionError("Object '%s' does not have keys" % type(_a).__name__)
    try:
      planesegments = _a['planesegments']
    except KeyError:
      _missing_members.append('planesegments')
    except TypeError:
      raise spyder.ConstructionError("Object '%s' does not have keys" % type(_a).__name__)
    try:
      rotationsegments = _a['rotationsegments']
    except KeyError:
      _missing_members.append('rotationsegments')
    except TypeError:
      raise spyder.ConstructionError("Object '%s' does not have keys" % type(_a).__name__)
    axis = AxisSystem()
    if "axis" in _a: axis = _a["axis"]
    if isinstance(_a, dict) and "axis" in _a: axis = _a["axis"]
    if len(_missing_members): raise spyder.ConstructionError("Object '%s' has missing keys: %s" % (type(_a).__name__, _missing_members) )
    return (rx,ry,rrx,rry,planesegments,rotationsegments,axis,)
  def validate(self):
    """Auto-generated by Spyder:
     module core
     file validate.py
     function generate_validate
    Validates the current object
    This is automatically called after construction
    It is NOT automatically called after editing the object"""
    try:
      pass
      self.rx = Float(self.rx)
      self.ry = Float(self.ry)
      self.rrx = Float(self.rrx)
      self.rry = Float(self.rry)
      self.planesegments = Integer(self.planesegments)
      self.rotationsegments = Integer(self.rotationsegments)
      self.axis = AxisSystem(self.axis)
      self.__validate__()
    except Exception as inst: 
      if isinstance(inst, AssertionError) or isinstance(inst, spyder.ValidationError):
        raise 
      else:
        import traceback
        e = traceback.format_exc()
        raise spyder.ValidationError(e)
  def __validate__(self):
    """Auto-generated by Spyder:
     module core
     file validate.py
     function generate_intern_validate
    Private object validator, for internal use only"""
    rx = self.rx
    ry = self.ry
    rrx = self.rrx
    rry = self.rry
    planesegments = self.planesegments
    rotationsegments = self.rotationsegments
    axis = self.axis
    spyder.core._assert(self, 'rx > 0', 'assert rx > 0')
    spyder.core._assert(self, 'ry > 0', 'assert ry > 0')
    spyder.core._assert(self, 'rrx >= 0', 'assert rrx >= 0')
    spyder.core._assert(self, 'rry >= 0', 'assert rry >= 0')
    spyder.core._assert(self, 'planesegments >= 2', 'assert planesegments >= 2')
    spyder.core._assert(self, 'rotationsegments >= 2', 'assert rotationsegments >= 2')
  @classmethod
  def _register_errors(cls):
    """Auto-generated by Spyder:
     module core
     file validate.py
     function _register_errors
    Private class method to register error messages, for internal use only"""  
    spyder.core._register_error(cls, 'assert rx > 0', None)
    spyder.core._register_error(cls, 'assert ry > 0', None)
    spyder.core._register_error(cls, 'assert rrx >= 0', None)
    spyder.core._register_error(cls, 'assert rry >= 0', None)
    spyder.core._register_error(cls, 'assert planesegments >= 2', None)
    spyder.core._register_error(cls, 'assert rotationsegments >= 2', None)
    if hasattr(cls,'_update_errors'): cls._update_errors()
  def __str__(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_str
    Converts the current object to a string
    This function is triggered by the print statement
    Redirects to self.__print__"""
    return self.__print__(0, "str")
  def str(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_str
    Converts the current object to a string
    Redirects to self.__print__"""
    return self.__print__(0, "str")
  def data(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_str
    Converts the current object to a string
    Redirects to self.__print__"""
    return self.__print__(0, "str")
  def repr(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_repr
    Converts the current object to a representation string
    As a side effect, saves all files within the object
    Redirects to self.__print__"""
    return self.__print__(0, "repr")
  def __repr__(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_repr
    Converts the current object to a representation string
    As a side effect, saves all files within the object
    Redirects to self.__print__"""
    return self.__print__(0, "repr")
  def __print__(self,spaces,mode):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_print
    Pretty-prints the current object, for internal use only"""
    ret = "%s (\n" % self.typename() 
    v = self.rx
    if type(v) != Float: v = Float(v)
    ret += "%srx = " % ((spaces+2) * " ") + v.__print__(spaces+2, mode) + ",\n"
    v = self.ry
    if type(v) != Float: v = Float(v)
    ret += "%sry = " % ((spaces+2) * " ") + v.__print__(spaces+2, mode) + ",\n"
    v = self.rrx
    if type(v) != Float: v = Float(v)
    ret += "%srrx = " % ((spaces+2) * " ") + v.__print__(spaces+2, mode) + ",\n"
    v = self.rry
    if type(v) != Float: v = Float(v)
    ret += "%srry = " % ((spaces+2) * " ") + v.__print__(spaces+2, mode) + ",\n"
    v = self.planesegments
    if type(v) != Integer: v = Integer(v)
    ret += "%splanesegments = " % ((spaces+2) * " ") + v.__print__(spaces+2, mode) + ",\n"
    v = self.rotationsegments
    if type(v) != Integer: v = Integer(v)
    ret += "%srotationsegments = " % ((spaces+2) * " ") + v.__print__(spaces+2, mode) + ",\n"
    v = self.axis
    if type(v) != AxisSystem: v = AxisSystem(v)
    ret += "%saxis = " % ((spaces+2) * " ") + v.__print__(spaces+2, mode) + ",\n"
    ret += "%s)" % (spaces * " ")
    return ret
  def dict(self):
    """Auto-generated by Spyder:
     module core
     file dict.py
     function generate_dict
    Converts the current object to a Python dictionary"""
    _d = {}
    v = self.rx
    if type(v) != Float: v = Float(v)
    _d["rx"] = v.dict()
    v = self.ry
    if type(v) != Float: v = Float(v)
    _d["ry"] = v.dict()
    v = self.rrx
    if type(v) != Float: v = Float(v)
    _d["rrx"] = v.dict()
    v = self.rry
    if type(v) != Float: v = Float(v)
    _d["rry"] = v.dict()
    v = self.planesegments
    if type(v) != Integer: v = Integer(v)
    _d["planesegments"] = v.dict()
    v = self.rotationsegments
    if type(v) != Integer: v = Integer(v)
    _d["rotationsegments"] = v.dict()
    v = self.axis
    if type(v) != AxisSystem: v = AxisSystem(v)
    _d["axis"] = v.dict()
    return _d
  def __parse__(self, s):
    """Auto-generated by Spyder:
     module core
     file parse.py
     function generate_parse
    Parsing constructor, which redirects to spyder.core.parse"""
    p = spyder.core.parse(s, "Spyder", True)
    if type(p) == type(self):
      self.__dict__ = p.__dict__
      return None
    if isinstance(p, Object):
      a = self.__spydercopy__(p)
    else:
      assert isinstance(p, tuple) and len(p) == 2, type(p) #if not a Spyder object, spyder.core.parse should return a tuple 
      args, kwargs = p[0], p[1]
      if len(kwargs) > 0 and len(args) == 0:
        a = self.__copydict__(p[1])
      else:
        a = self.__unpack__(*p[0], **p[1])
    return a
  @classmethod
  def fromfile(c, filename, fastparse=False):
    """Auto-generated by Spyder:
     module core
     file parse.py
     function generate_parse   
    fromfile constructor"""
    n = spyder.linesep
    exc = ""
    try:
      try: #first attempt a parsing read, does not work with all data models
        s = spyder._file_load(filename).read()
        if fastparse:
          data = spyder.core.fastparse(s)
        else:
          data = spyder.core.parse(s)
        ret = c.fromdict(data[1])
      except Exception as e: 
        head = n + "### Core parser ###" + n 
        exc += head + spyder.exception()
        e.__context__ = None      
        raise
    except Exception as e: 
      try: #read using File, also works with web links
        try:
          ret = spyder.__types__["File"](filename, c).data()
        except Exception as e:
          head = n + "### Spyder.File parser ###" + n 
          exc += head + spyder.exception()
          e.__context__ = None
          raise                  
      except Exception as e:
        raise type(e)(exc)
    return ret
  def tofile(self, filename):
    """Auto-generated by Spyder:
     module core
     file parse.py
     function generate_parse      
    Saves object to file"""
    f = spyder.__types__["File"](filename, type(self), "w", self)
    f.save()
    f.close()
  def totempfile(self):
    """Auto-generated by Spyder:
     module core
     file parse.py
     function generate_parse      
    Saves object to temporary file"""
    import random, os,tempfile
    tempdir = tempfile.gettempdir()
    while 1:
      tempnam = tempdir + os.sep + str(random.randrange(1,1000000000)) +".tmp"
      if not spyder.loader.file_exists(tempnam): break
    f = spyder.__types__["File"](tempnam, type(self), "w", self)
    f.temporary(True)
    f.save()
    return f
  def __getattr__(self, method):
    """Auto-generated by Spyder:
     module core
     file convert.py
     function generate_getattr
    Invokes the conversion engine """    
    m = spyder.core.method(POrbital, method, self)
    return m
  def convert(self, target,deepcopy=True):
    """Auto-generated by Spyder: 
     module core
     file convert.py
     function generate_convert
    Convert current object into type "target" """
    c = spyder.core.convert(POrbital, target, self, deepcopy)
    return c
  def threadconvert(self, target, deepcopy=True):
    """Auto-generated by Spyder:
     module core
     file convert.py
     function generate_convert
    Asynchronously convert current object into type "target"
    Immediately returns a waiting handle to the result
    Use spyder.core.thread.wait_all(<list of handles>)
     or spyder.core.thread.wait_any(<list of handles>)
     to wait for the result
    """
    c = spyder.core.spyderthread.threadstart (
     spyder.core.convert, (POrbital, target, self, deepcopy),
     name="POrbital=>%s" % target.typename(), 
    )
    return c
  
  def __ne__(self,_a): return not self.__eq__(_a)
  def __eq__(self,_a):
    """Auto-generated by Spyder:
     module core
     file eq.py
     function generate_eq
    Comparison operator"""
    try:
      if not isinstance(_a,POrbital) and not isinstance(self, type(_a)): return False
    except (TypeError, AttributeError, spyder.ValidationError): return False
    if _a is self: return True
    if self.rx != _a.rx: return False
    if self.ry != _a.ry: return False
    if self.rrx != _a.rrx: return False
    if self.rry != _a.rry: return False
    if self.planesegments != _a.planesegments: return False
    if self.rotationsegments != _a.rotationsegments: return False
    if self.axis != _a.axis: return False
    try:
      if not ThreeDee.__eq__(self, _a): return False
    except AttributeError:
      pass
    return True
  
  @classmethod
  def _form(cls):
    """Auto-generated by Spyder:
     module core
     file form.py
     function generate_form
     Returns the spyderform of the class
     This function is automatically called at class creation"""
    return spyder.core.spyderforms[cls.typename()]
  @classmethod
  def __form__(cls):
    """Auto-generated by Spyder:
     module core
     file form.py
     function generate_form
     Generates the spyderform of the class
     This function is automatically called at class creation"""
    self = spyder.core.spyderform(cls._typetree())
    rx = self.rx
    ry = self.ry
    rrx = self.rrx
    rry = self.rry
    planesegments = self.planesegments
    rotationsegments = self.rotationsegments
    axis = self.axis
    self.matrix = "axis"
    rx.default = 1
    rx.min = 0.01
    rx.max = 5
    ry.default = 1
    ry.min = 0.01
    ry.max = 5
    rrx.default = 1
    rrx.min = 0
    rrx.max = 5
    rry.default = 1
    rry.min = 0
    rry.max = 5
    planesegments.default = 8
    planesegments.min = 2
    planesegments.max = 100
    rotationsegments.default = 8
    rotationsegments.min = 2
    rotationsegments.max = 100
spyder.__types__["POrbital"] = POrbital
spyder.core.error["POrbital"] = {}
if hasattr(POrbital, '_register_errors'): POrbital._register_errors()
POrbital._requiredmembers = [['Float', 'rx', 1], ['Float', 'ry', 2], ['Float', 'rrx', 3], ['Float', 'rry', 4], ['Integer', 'planesegments', 5], ['Integer', 'rotationsegments', 6]]
POrbital._defaultmembers = [['AxisSystem', 'axis', 'AxisSystem()', 7]]
POrbital.__form__()
ResourcePOrbital = spyder.__types__["_Resource"](POrbital)

POrbital.empty = functools.partial(spyder.__constructor, 
  "constructor_empty",
  POrbital,
  "constructor_fromany",
)
POrbital.fromlist = functools.partial(spyder.__constructor, 
  "constructor_fromlist",
  POrbital,
  "constructor_fromany",
)
POrbital.fromdict = functools.partial(spyder.__constructor, 
  "constructor_fromdict",
  POrbital,
  "constructor_fromany",
)

class POrbitalArray(spyder.core.spyderlist):
  @staticmethod
  def typename(): return "POrbitalArray"
  def __spydercopy__(self,a):
    list.__init__(self, a)
    if hasattr(a, "__conversionstack__"): self.__conversionstack__ = a.__conversionstack__
 
  def repr(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_repr
    Converts the current object to a representation string
    As a side effect, saves all files within the object
    Redirects to self.__print__"""
    return self.__print__(0, "repr")
  def __repr__(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_repr
    Converts the current object to a representation string
    As a side effect, saves all files within the object
    Redirects to self.__print__"""
    return self.__print__(0, "repr")

  
  @classmethod
  def _form(cls):
    """Auto-generated by Spyder:
     module core
     file form.py
     function generate_form
     Returns the spyderform of the class
     This function is automatically called at class creation"""
    return spyder.core.spyderforms[cls.typename()]
  @classmethod
  def __form__(cls):
    """Auto-generated by Spyder:
     module core
     file form.py
     function generate_form
     Generates the spyderform of the class
     This function is automatically called at class creation"""
    spyder.core.spyderform(cls._typetree()) 
    t = cls.typename()
    while t.endswith("Array"): t = t[:-len("Array")]
    spyder.core.spyderforms[cls.typename()]._members = spyder.core.spyderforms[t]._members

  def validate(self): self.__validate__()

  def __ne__(self,_a): return not self.__eq__(_a)
  def __eq__(self,_a):
    """Auto-generated by Spyder:
     module core
     file eq.py
     function generate_eq
    Comparison operator"""
    if not isinstance(_a, POrbitalArray) and not isinstance(self, type(_a)): return False
    if _a is self: return True
    if len(self) != len(_a): return False
    for n,nn in zip(self,_a):
      if n != nn: return False
    return True

  def __str__(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_str
    Converts the current object to a string
    This function is triggered by the print statement
    Redirects to self.__print__"""
    return self.__print__(0, "str")
  def str(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_str
    Converts the current object to a string
    Redirects to self.__print__"""
    return self.__print__(0, "str")
  def data(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_str
    Converts the current object to a string
    Redirects to self.__print__"""
    return self.__print__(0, "str")


  @classmethod
  def _typetree(cls): 
    """Auto-generated by Spyder:
     module core
     file typetree.py
     function typetree
    Returns the typetree of the Spyder class"""          
    spyder.core.build_members(cls.typename(),cls)
    return spyder.core.get_typetreedict(cls.typename())

  def convert(self, target,deepcopy=True):
    c = spyder.core.convert(POrbitalArray, target, self, deepcopy)
    return c
  def threadconvert(self, target,deepcopy=True):
    c = spyder.core.spyderthread.threadstart (
     spyder.core.convert, (POrbitalArray, target, self,deepcopy),
     name="POrbitalArray=>%s" % target.typename(), 
    )
    return c    

  def __getattr__(self, method):    
      m = spyder.core.method(POrbitalArray, method, self)
      return m

  
  def list(self):
    ret = []
    for vnr in range(len(self)):
      if type(self[vnr]) != POrbital: self[vnr] = POrbital(self[vnr])
      ret.append(self[vnr].dict())
    return ret  
  
  def dict(self):
    return self.list()

  def __parse__(self, s):
    """Auto-generated by Spyder:
     module core
     file parse.py
     function generate_parse   
    Parsing constructor, which redirects to spyder.core.parse"""
    args = spyder.core.parse(s, "Spyder", True)
    self.__spydercopy__(args[0])
  @classmethod
  def fromfile(c, filename, fastparse=False):
    """Auto-generated by Spyder:
     module core
     file parse.py
     function generate_parse   
    fromfile constructor"""
    n = spyder.linesep
    exc = ""
    try:
      try: #first attempt a parsing read, does not work with all data models
        s = spyder._file_load(filename).read()
        if fastparse:
          data = spyder.core.fastparse(s)
        else:
          data = spyder.core.parse(s)
        ret = c.fromdict(data[1])
      except Exception as e: 
        head = n + "### Core parser ###" + n 
        exc += head + spyder.exception()
        e.__context__ = None      
        raise
    except Exception as e: 
      try: #read using File, also works with web links
        try:
          ret = spyder.__types__["File"](filename, c).data()
        except Exception as e:
          head = n + "### Spyder.File parser ###" + n 
          exc += head + spyder.exception()
          e.__context__ = None
          raise                  
      except Exception as e:
        raise type(e)(exc)
    return ret
  def tofile(self, filename):
    """Auto-generated by Spyder:
     module core
     file parse.py
     function generate_parse      
    Saves object to file"""
    f = spyder.__types__["File"](filename, type(self), "w", self)
    f.save()
    f.close()
  def totempfile(self):
    """Auto-generated by Spyder:
     module core
     file parse.py
     function generate_parse      
    Saves object to temporary file"""
    import random, os,tempfile
    tempdir = tempfile.gettempdir()
    while 1:
      tempnam = tempdir + os.sep + str(random.randrange(1,1000000000)) +".tmp"
      if not spyder.loader.file_exists(tempnam): break
    f = spyder.__types__["File"](tempnam, type(self), "w", self)
    f.temporary(True)
    f.save()
    return f

  def __arrayvalidate__(self):
    if self.__constructor__ == self.__defaultconstructor__:
      def reconstruct(classtype, index, var):
        spyder.errorpath.append((POrbitalArray, classtype,index))
        ret = classtype(var)
        spyder.errorpath.pop()
        return ret
    else:
       def reconstruct(classtype, index, var):         
         classtype.__constructor__ = self.__constructor__
         spyder.errorpath.append((POrbitalArray, classtype, index))
         try:
           ret = classtype(var)           
         finally:
           classtype.__constructor__ = self.__defaultconstructor__
         spyder.errorpath.pop()           
         return ret               
    for v in range(len(self)):
      self[v] = reconstruct(POrbital,v,self[v])
  def __validate__(self):
    try:
      self.__arrayvalidate__()
    except AssertionError as exc:
      exc.__context__ = None
      raise AssertionError(spyder.exception())

  def __print__(self,spaces,mode):
    ret = "%s (\n" % self.typename()
    for v in self:
      ret += (spaces+2) * " " + v.__print__(spaces+2, mode) + ",\n"
    ret += spaces * " " +  ")"
    return ret

  __constructor__ = "constructor_fromany"
  __defaultconstructor__ = __constructor__
  def constructor_empty(self):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    Empty constructor, all members must be assigned manually afterwards"""
  def constructor_fromlist(self, *a):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    List constructor"""    
    errorpath = []
    errorpath[:] = spyder.errorpath[:]    
    try:
      list.__init__(self, *a)
      self.validate()
    except AssertionError as e:
      e.__context__ = None
      spyder.errorpath[:] = errorpath[:]
      raise e
    except Exception as e:
      e.__context__ = None
      spyder.errorpath[:] = errorpath[:]      
      err = str(e)
      exc = "An error has occurred in the construction of a POrbitalArray object"      
      if isinstance(e, spyder.ConstructionError):
        raise spyder.ConstructionError(spyder.exception(exc + "\n" + err))
      else:
        raise spyder.ConstructionError(exc + spyder.exception())      
    return self      
  constructor_fromdict = constructor_fromlist
  
  def __init__(self,*a, **args2):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    Init function, calls the general constructor (fromany by default)"""
    if len(args2.keys()): raise Exception          
    POrbitalArray.__dict__[POrbitalArray.__constructor__](self, *a)  
  def constructor_fromany(self, *a):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    General constructor for arrays"""    
    if len(a) == 0:
      spyder.core.spyderlist.__init__(self)
      return
    errorpath = []
    errorpath[:] = spyder.errorpath[:]          
    try:  
      try:
        if len(a) > 1: raise Exception
        if issubclass(Spyder.POrbital, Spyder.StringLike):
          try:
            args = spyder.core.parse(a[0], "Spyder")
            if not isinstance(args, str): raise Exception
            self.__spydercopy__([args])            
            self.validate()
            return
          except:
            try:
              self.__parse__(a[0])
              self.validate()            
              return              
            except:
              pass        
        if isinstance(a[0],str) or (spyder.python3 and isinstance(a[0],bytes)): raise Exception
        spyder.errorpath[:] = errorpath[:]
        self.__spydercopy__(*a)
        self.validate()
      except AssertionError: raise
      except:        
        try:
          spyder.errorpath[:] = errorpath[:]
          self.__spydercopy__(a)
          self.validate()
        except AssertionError: raise
        except:
          spyder.errorpath[:] = errorpath[:]
          if len(a) > 1: raise Exception #
          self.__parse__(a[0])
          self.validate()
    except AssertionError as e:
      e.__context__ = None
      spyder.errorpath[:] = errorpath[:]
      raise        
    except Exception as e:
      e.__context__ = None
      spyder.errorpath[:] = errorpath[:]
      err = str(e)
      exc = "An error has occurred in the construction of a POrbitalArray object"
      if isinstance(e, spyder.ConstructionError):
        raise spyder.ConstructionError(spyder.exception(exc + "\n" + err))
      else:
        raise spyder.ConstructionError(exc + spyder.exception())      
    return self    

    
spyder.core.defineconverter("POrbitalArray","POrbital","SPLIT")
spyder.core.defineconverter("POrbital","POrbitalArray","CAST")
spyder.__types__["POrbitalArray"] = globals()["POrbitalArray"]  
arrayclass = spyder.__types__["POrbitalArray"]
spyder.__types__["ResourcePOrbitalArray"] = spyder.__types__["_Resource"](arrayclass)
arrayclass.empty = functools.partial(spyder.__constructor, 
"constructor_empty",
arrayclass,
"constructor_fromany",
)
arrayclass.fromlist = functools.partial(spyder.__constructor, 
"constructor_fromlist",
arrayclass,
"constructor_fromany",
)
arrayclass.fromdict = functools.partial(spyder.__constructor, 
"constructor_fromdict",
arrayclass,
"constructor_fromany",
)
arrayclass.__form__()
class POrbitalArrayArray(spyder.core.spyderlist):
  @staticmethod
  def typename(): return "POrbitalArrayArray"
  def __spydercopy__(self,a):
    list.__init__(self, a)
    if hasattr(a, "__conversionstack__"): self.__conversionstack__ = a.__conversionstack__
 
  def repr(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_repr
    Converts the current object to a representation string
    As a side effect, saves all files within the object
    Redirects to self.__print__"""
    return self.__print__(0, "repr")
  def __repr__(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_repr
    Converts the current object to a representation string
    As a side effect, saves all files within the object
    Redirects to self.__print__"""
    return self.__print__(0, "repr")

  
  @classmethod
  def _form(cls):
    """Auto-generated by Spyder:
     module core
     file form.py
     function generate_form
     Returns the spyderform of the class
     This function is automatically called at class creation"""
    return spyder.core.spyderforms[cls.typename()]
  @classmethod
  def __form__(cls):
    """Auto-generated by Spyder:
     module core
     file form.py
     function generate_form
     Generates the spyderform of the class
     This function is automatically called at class creation"""
    spyder.core.spyderform(cls._typetree()) 
    t = cls.typename()
    while t.endswith("Array"): t = t[:-len("Array")]
    spyder.core.spyderforms[cls.typename()]._members = spyder.core.spyderforms[t]._members

  def validate(self): self.__validate__()

  def __ne__(self,_a): return not self.__eq__(_a)
  def __eq__(self,_a):
    """Auto-generated by Spyder:
     module core
     file eq.py
     function generate_eq
    Comparison operator"""
    if not isinstance(_a, POrbitalArrayArray) and not isinstance(self, type(_a)): return False
    if _a is self: return True
    if len(self) != len(_a): return False
    for n,nn in zip(self,_a):
      if n != nn: return False
    return True

  def __str__(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_str
    Converts the current object to a string
    This function is triggered by the print statement
    Redirects to self.__print__"""
    return self.__print__(0, "str")
  def str(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_str
    Converts the current object to a string
    Redirects to self.__print__"""
    return self.__print__(0, "str")
  def data(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_str
    Converts the current object to a string
    Redirects to self.__print__"""
    return self.__print__(0, "str")


  @classmethod
  def _typetree(cls): 
    """Auto-generated by Spyder:
     module core
     file typetree.py
     function typetree
    Returns the typetree of the Spyder class"""          
    spyder.core.build_members(cls.typename(),cls)
    return spyder.core.get_typetreedict(cls.typename())

  def convert(self, target,deepcopy=True):
    c = spyder.core.convert(POrbitalArrayArray, target, self, deepcopy)
    return c
  def threadconvert(self, target,deepcopy=True):
    c = spyder.core.spyderthread.threadstart (
     spyder.core.convert, (POrbitalArrayArray, target, self,deepcopy),
     name="POrbitalArrayArray=>%s" % target.typename(), 
    )
    return c    

  def __getattr__(self, method):    
      m = spyder.core.method(POrbitalArrayArray, method, self)
      return m

  
  def list(self):
    ret = []
    for vnr in range(len(self)):
      if type(self[vnr]) != POrbital: self[vnr] = POrbital(self[vnr])
      ret.append(self[vnr].dict())
    return ret  
  
  def dict(self):
    return self.list()

  def __parse__(self, s):
    """Auto-generated by Spyder:
     module core
     file parse.py
     function generate_parse   
    Parsing constructor, which redirects to spyder.core.parse"""
    args = spyder.core.parse(s, "Spyder", True)
    self.__spydercopy__(args[0])
  @classmethod
  def fromfile(c, filename, fastparse=False):
    """Auto-generated by Spyder:
     module core
     file parse.py
     function generate_parse   
    fromfile constructor"""
    n = spyder.linesep
    exc = ""
    try:
      try: #first attempt a parsing read, does not work with all data models
        s = spyder._file_load(filename).read()
        if fastparse:
          data = spyder.core.fastparse(s)
        else:
          data = spyder.core.parse(s)
        ret = c.fromdict(data[1])
      except Exception as e: 
        head = n + "### Core parser ###" + n 
        exc += head + spyder.exception()
        e.__context__ = None      
        raise
    except Exception as e: 
      try: #read using File, also works with web links
        try:
          ret = spyder.__types__["File"](filename, c).data()
        except Exception as e:
          head = n + "### Spyder.File parser ###" + n 
          exc += head + spyder.exception()
          e.__context__ = None
          raise                  
      except Exception as e:
        raise type(e)(exc)
    return ret
  def tofile(self, filename):
    """Auto-generated by Spyder:
     module core
     file parse.py
     function generate_parse      
    Saves object to file"""
    f = spyder.__types__["File"](filename, type(self), "w", self)
    f.save()
    f.close()
  def totempfile(self):
    """Auto-generated by Spyder:
     module core
     file parse.py
     function generate_parse      
    Saves object to temporary file"""
    import random, os,tempfile
    tempdir = tempfile.gettempdir()
    while 1:
      tempnam = tempdir + os.sep + str(random.randrange(1,1000000000)) +".tmp"
      if not spyder.loader.file_exists(tempnam): break
    f = spyder.__types__["File"](tempnam, type(self), "w", self)
    f.temporary(True)
    f.save()
    return f

  def __arrayvalidate__(self):
    if self.__constructor__ == self.__defaultconstructor__:
      def reconstruct(classtype, index, var):
        spyder.errorpath.append((POrbitalArrayArray, classtype,index))
        ret = classtype(var)
        spyder.errorpath.pop()
        return ret
    else:
       def reconstruct(classtype, index, var):         
         classtype.__constructor__ = self.__constructor__
         spyder.errorpath.append((POrbitalArrayArray, classtype, index))
         try:
           ret = classtype(var)           
         finally:
           classtype.__constructor__ = self.__defaultconstructor__
         spyder.errorpath.pop()           
         return ret               
    for v in range(len(self)):
      self[v] = reconstruct(POrbitalArray,v,self[v])
  def __validate__(self):
    try:
      self.__arrayvalidate__()
    except AssertionError as exc:
      exc.__context__ = None
      raise AssertionError(spyder.exception())

  def __print__(self,spaces,mode):
    ret = "%s (\n" % self.typename()
    for v in self:
      ret += (spaces+2) * " " + v.__print__(spaces+2, mode) + ",\n"
    ret += spaces * " " +  ")"
    return ret

  __constructor__ = "constructor_fromany"
  __defaultconstructor__ = __constructor__
  def constructor_empty(self):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    Empty constructor, all members must be assigned manually afterwards"""
  def constructor_fromlist(self, *a):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    List constructor"""    
    errorpath = []
    errorpath[:] = spyder.errorpath[:]    
    try:
      list.__init__(self, *a)
      self.validate()
    except AssertionError as e:
      e.__context__ = None
      spyder.errorpath[:] = errorpath[:]
      raise e
    except Exception as e:
      e.__context__ = None
      spyder.errorpath[:] = errorpath[:]      
      err = str(e)
      exc = "An error has occurred in the construction of a POrbitalArrayArray object"      
      if isinstance(e, spyder.ConstructionError):
        raise spyder.ConstructionError(spyder.exception(exc + "\n" + err))
      else:
        raise spyder.ConstructionError(exc + spyder.exception())      
    return self      
  constructor_fromdict = constructor_fromlist
  
  def __init__(self,*a, **args2):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    Init function, calls the general constructor (fromany by default)"""
    if len(args2.keys()): raise Exception          
    POrbitalArrayArray.__dict__[POrbitalArrayArray.__constructor__](self, *a)  
  def constructor_fromany(self, *a):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    General constructor for arrays"""    
    if len(a) == 0:
      spyder.core.spyderlist.__init__(self)
      return
    errorpath = []
    errorpath[:] = spyder.errorpath[:]          
    try:  
      try:
        if len(a) > 1: raise Exception
        if issubclass(Spyder.POrbitalArray, Spyder.StringLike):
          try:
            args = spyder.core.parse(a[0], "Spyder")
            if not isinstance(args, str): raise Exception
            self.__spydercopy__([args])            
            self.validate()
            return
          except:
            try:
              self.__parse__(a[0])
              self.validate()            
              return              
            except:
              pass        
        if isinstance(a[0],str) or (spyder.python3 and isinstance(a[0],bytes)): raise Exception
        spyder.errorpath[:] = errorpath[:]
        self.__spydercopy__(*a)
        self.validate()
      except AssertionError: raise
      except:        
        try:
          spyder.errorpath[:] = errorpath[:]
          self.__spydercopy__(a)
          self.validate()
        except AssertionError: raise
        except:
          spyder.errorpath[:] = errorpath[:]
          if len(a) > 1: raise Exception #
          self.__parse__(a[0])
          self.validate()
    except AssertionError as e:
      e.__context__ = None
      spyder.errorpath[:] = errorpath[:]
      raise        
    except Exception as e:
      e.__context__ = None
      spyder.errorpath[:] = errorpath[:]
      err = str(e)
      exc = "An error has occurred in the construction of a POrbitalArrayArray object"
      if isinstance(e, spyder.ConstructionError):
        raise spyder.ConstructionError(spyder.exception(exc + "\n" + err))
      else:
        raise spyder.ConstructionError(exc + spyder.exception())      
    return self    

    
spyder.core.defineconverter("POrbitalArrayArray","POrbitalArray","SPLIT")
spyder.core.defineconverter("POrbitalArray","POrbitalArrayArray","CAST")
spyder.__types__["POrbitalArrayArray"] = globals()["POrbitalArrayArray"]  
arrayclass = spyder.__types__["POrbitalArrayArray"]
spyder.__types__["ResourcePOrbitalArrayArray"] = spyder.__types__["_Resource"](arrayclass)
arrayclass.empty = functools.partial(spyder.__constructor, 
"constructor_empty",
arrayclass,
"constructor_fromany",
)
arrayclass.fromlist = functools.partial(spyder.__constructor, 
"constructor_fromlist",
arrayclass,
"constructor_fromany",
)
arrayclass.fromdict = functools.partial(spyder.__constructor, 
"constructor_fromdict",
arrayclass,
"constructor_fromany",
)
arrayclass.__form__()

"""Define Object3D(POrbital p) {
  pi = math.pi
  alpha = math.asin(p.rrx / (p.rx + p.rrx))
  ypos = (p.ry + p.rry) * math.cos(alpha)
  angles1 = [0.5*pi]
  angles2 = [0]
  for n in range(p.planesegments-1):
    angles1.append((n+1)*(0.5*pi-alpha)/p.planesegments+0.5*pi)
  for n in range(p.planesegments-1):
    angles2.append((n+1)*(0.5*pi)/p.planesegments)
  vertices = []
  data = (
    (angles2,p.rx,p.ry,0,0),
    (angles1,p.rx,p.ry,0,0),
    (angles1,-p.rrx,-p.rry,-p.rrx,-ypos),
    (angles1,-p.rrx,p.rry,-p.rrx,-ypos),
    (angles1,p.rx,-p.ry,0,-2*ypos),
    (angles2,p.rx,-p.ry,0,-2*ypos),
  )
  for angles,xrad,yrad,xp,yp in data:
    verts = []
    for a in angles:
      x = xrad * -math.sin(a) + xp
      y = yrad * math.cos(a) + yp
      verts.append((x,y))
    vertices.append(verts)
  vertices[2].reverse()
  vertices[4].reverse()
  vertices[5].reverse()
  allvertices = reduce(lambda a,b: a+b, vertices)
  allvertices2 = []
  vlen = len(allvertices)
  for pnr in range(vlen-1):
    for n in (1,):
      if allvertices[pnr][0] != allvertices[pnr+1][0]: break
      if allvertices[pnr][1] != allvertices[pnr+1][1]: break
    else:
      continue
    allvertices2.append(allvertices[pnr])
  allvertices = allvertices2 + allvertices[-1:]
  #s = '\n'.join([' '.join([str(vv) for vv in v]) for v in allvertices]) +'\n'
  #print Stream(s) | "xmgrace -pipe"
  vertices3d = []
  for r in range(p.rotationsegments):
    angle = r*2*pi/p.rotationsegments
    sinang = math.sin(angle)
    cosang = math.cos(angle)
    for v in allvertices:
      vertices3d.append((v[0] * sinang,v[1], v[0]*cosang))
  faces = []
  vlen = len(allvertices)
  for pnr in range(vlen-1):
    for r in range(p.rotationsegments):
      nextr = r+1
      if nextr==p.rotationsegments: nextr = 0
      v1 = pnr + r * vlen
      v2 = pnr + r * vlen + 1
      v3 = pnr + nextr * vlen + 1
      v4 = pnr + nextr * vlen
      currface = [v1,v2]
      if allvertices[pnr+1][0] != 0:
        currface.append(v3)
      if allvertices[pnr][0] != 0:
        currface.append(v4)
      faces.append(currface)
  o1 = Object3D(faces=faces, vertices=vertices3d,axis=p.axis)
  return o1
}"""
def spyderconverterfunction_18(p):
  pi = math.pi
  alpha = math.asin(p.rrx / (p.rx + p.rrx))
  ypos = (p.ry + p.rry) * math.cos(alpha)
  angles1 = [0.5*pi]
  angles2 = [0]
  for n in range(p.planesegments-1):
    angles1.append((n+1)*(0.5*pi-alpha)/p.planesegments+0.5*pi)
  for n in range(p.planesegments-1):
    angles2.append((n+1)*(0.5*pi)/p.planesegments)
  vertices = []
  data = (
    (angles2,p.rx,p.ry,0,0),
    (angles1,p.rx,p.ry,0,0),
    (angles1,-p.rrx,-p.rry,-p.rrx,-ypos),
    (angles1,-p.rrx,p.rry,-p.rrx,-ypos),
    (angles1,p.rx,-p.ry,0,-2*ypos),
    (angles2,p.rx,-p.ry,0,-2*ypos),
  )
  for angles,xrad,yrad,xp,yp in data:
    verts = []
    for a in angles:
      x = xrad * -math.sin(a) + xp
      y = yrad * math.cos(a) + yp
      verts.append((x,y))
    vertices.append(verts)
  vertices[2].reverse()
  vertices[4].reverse()
  vertices[5].reverse()
  allvertices = reduce(lambda a,b: a+b, vertices)
  allvertices2 = []
  vlen = len(allvertices)
  for pnr in range(vlen-1):
    for n in (1,):
      if allvertices[pnr][0] != allvertices[pnr+1][0]: break
      if allvertices[pnr][1] != allvertices[pnr+1][1]: break
    else:
      continue
    allvertices2.append(allvertices[pnr])
  allvertices = allvertices2 + allvertices[-1:]
  #s = '\n'.join([' '.join([str(vv) for vv in v]) for v in allvertices]) +'\n'
  #print Stream(s) | "xmgrace -pipe"
  vertices3d = []
  for r in range(p.rotationsegments):
    angle = r*2*pi/p.rotationsegments
    sinang = math.sin(angle)
    cosang = math.cos(angle)
    for v in allvertices:
      vertices3d.append((v[0] * sinang,v[1], v[0]*cosang))
  faces = []
  vlen = len(allvertices)
  for pnr in range(vlen-1):
    for r in range(p.rotationsegments):
      nextr = r+1
      if nextr==p.rotationsegments: nextr = 0
      v1 = pnr + r * vlen
      v2 = pnr + r * vlen + 1
      v3 = pnr + nextr * vlen + 1
      v4 = pnr + nextr * vlen
      currface = [v1,v2]
      if allvertices[pnr+1][0] != 0:
        currface.append(v3)
      if allvertices[pnr][0] != 0:
        currface.append(v4)
      faces.append(currface)
  o1 = Object3D(faces=faces, vertices=vertices3d,axis=p.axis)
  return o1

spyder.core.defineconverter("POrbital","Object3D",spyderconverterfunction_18)

del spyderconverterfunction_18
