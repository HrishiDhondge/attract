
class FormulaGrid2D(ThreeDee):
  """Spyder-generated class

 module spyder.modules.models3d
 file 'formulagrid.spy'


  Parametric object based on functions of U and V
  Inspired by the Parametric Object plugin by Ed Mackey, http://www.blinken.com/blender-plugins.php
  
----------------------------------------------------------------------
Spyder definition:

Type FormulaGrid2D(ThreeDee) {
  #!#!#!
  Parametric object based on functions of U and V
  Inspired by the Parametric Object plugin by Ed Mackey, http://www.blinken.com/blender-plugins.php
  #!#!#!
  String xformula
  String yformula
  String zformula
  Float umin
  Float umax
  Integer usteps
  Float vmin
  Float vmax
  Integer vsteps
  Bool uwrap = True
  Bool vwrap = True
  validate {
    assert umin < umax
    assert usteps >= 2
    assert vmin < vmax
    assert vsteps >= 2   
    f = formula.formula(xformula,["u","v"]) 
    assert f != None
    assert f(0,0) != None
    f = formula.formula(yformula,["u","v"]) 
    assert f != None
    assert f(0,0) != None
    f = formula.formula(zformula,["u","v"]) 
    assert f != None
    assert f(0,0) != None
  }
  form {
    xformula.default = "sin(2*pi*u)*(2+(0.5*sin(2*pi*v)))"
    xformula.length = 100
    yformula.default = "cos(2*pi*u)*(2+(0.5*sin(2*pi*v)))"
    yformula.length = 100    
    zformula.default = "cos(2*pi*v)*0.5"
    zformula.length = 100
    umin.type = "number"
    umin.default = 0
    umin.min = -1000
    umin.max = 1000
    umax.type = "number"
    umax.default = 1
    umax.min = -1000
    umax.max = 1000    
    usteps.default = 64
    usteps.min = 2
    usteps.max = 10000
    vmin.type = "number"
    vmin.default = 0
    vmin.min = -1000
    vmin.max = 1000
    vmax.type = "number"
    vmax.default = 1
    vmax.min = -1000
    vmax.max = 1000  
    vsteps.default = 32  
    vsteps.min = 2
    vsteps.max = 10000    
  }
}

----------------------------------------------------------------------
"""
  
  @staticmethod
  def typename():
    """Auto-generated by Spyder:
     module core
     file class.py
     function generate_class
    Return the class name of the current object"""
    return "FormulaGrid2D"
  def cast(self, othertype):
    """Auto-generated by Spyder:
     module core
     file class.py
     function generate_class
    Return an object of the type "othertype" initialized from this object"""
    if type(othertype) == type(int): return othertype(self)    
    return globals()[othertype](self)

  __constructor__ = "constructor_fromany" #Auto-generated by Spyder
  __defaultconstructor__ = __constructor__ #Auto-generated by Spyder
  def constructor_empty(self):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    Empty constructor, all members must be assigned manually afterwards"""    
  def constructor_fromlist(self, *args, **args2):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    List constructor"""        
    errorpath = []
    errorpath[:] = spyder.errorpath[:]    
    try:
      a = self.__unpack__(*args[0])
      self.__construct__ (*a)
    except AssertionError as e: 
      e.__context__ = None
      spyder.errorpath[:] = errorpath[:]
      raise e   
    except Exception as e:
      e.__context__ = None
      spyder.errorpath[:] = errorpath[:]
      err = str(e)
      exc = "An error has occurred in the construction of a FormulaGrid2D object"      
      if isinstance(e, spyder.ConstructionError):
        raise spyder.ConstructionError(spyder.exception(exc + "\n" + err))
      else:
        raise spyder.ConstructionError(exc + spyder.exception())            
    self.validate()      
  def constructor_fromdict(self, dic):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    Dict constructor"""           
    errorpath = []
    errorpath[:] = spyder.errorpath[:]
    try:
      a = self.__copydict__(dic)
      self.__construct__ (*a) 
    except AssertionError as e: 
      e.__context__ = None
      spyder.errorpath[:] = errorpath[:]
      raise         
    except Exception as e:
      e.__context__ = None
      spyder.errorpath[:] = errorpath[:]
      err = str(e)
      exc = "An error has occurred in the construction of a FormulaGrid2D object"      
      if isinstance(e, spyder.ConstructionError): 
        raise spyder.ConstructionError(spyder.exception(exc + "\n" + err))
      else:
        raise spyder.ConstructionError(exc + spyder.exception())        
    self.validate()
 
  def __init__(self,*args, **args2):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    Init function, calls the general constructor (fromany by default)"""            
    FormulaGrid2D.__dict__[FormulaGrid2D.__constructor__](self, *args, **args2)
  def constructor_fromany(self,*args, **args2):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    General constructor for the current class
    This function tries five specialized constructors in this order:
    - Copy constructor
    - Dict constructor
    - Value/Keyword constructor
    - Parsing constructor
    - List constructor
    For more information, see the Spyder documentation"""

    errorpath = []
    errorpath[:] = spyder.errorpath[:]
    raise_exc = None
    try:
      exc = "An error has occurred in the construction of a FormulaGrid2D object"
      exc += "\nNumber of arguments: value %d, keyword %d\n" % (len(args), len(args2))
      try:
        construct = -1
        try:
          if len(args) > 1 or len(args2) > 0: raise IndexError
          a = self.__spydercopy__(args[0]) #func(func(a,b,c))
        except AssertionError as e: 
          e.__context__ = None
          spyder.errorpath[:] = errorpath[:]
          raise e
        except Exception as e:
          if len(args) > 1 or len(args2) > 0: raise IndexError
          exc += "\n*** (FormulaGrid2D) Copy constructor ***"+ spyder.exception(newline=True)
          e.__context__ = None
          spyder.errorpath[:] = errorpath[:]
          try:
            a = self.__copydict__(args[0]) #func({a:1,b:2,c:3})
          except Exception as e:          
            exc += "\n*** (FormulaGrid2D) Dict constructor ***"+ spyder.exception(newline=True)
            e.__context__ = None
            spyder.errorpath[:] = errorpath[:]
            raise e
          else:
            construct = 2
        else:
          construct = 1              
        self.__construct__ (*a)
      except AssertionError as e: 
        e.__context__ = None
        spyder.errorpath[:] = errorpath[:]
        raise e
      except Exception as e:
        e.__context__ = None
        spyder.errorpath[:] = errorpath[:]
        if not (len(args) > 1 or len(args2) > 0):
          if construct == 1: exc += "\n*** (FormulaGrid2D) Copy constructor ***" + spyder.exception(newline=True)
          if construct == 2: exc += "\n*** (FormulaGrid2D) Dict constructor ***" + spyder.exception(newline=True)
        try:
          if len(args) == 1 and len(args2) == 0 and isinstance(args[0], str):
            if args[0].startswith("FormulaGrid2D") and args[0][len("FormulaGrid2D"):].lstrip()[0] == "(":
              spyder.errorpath[:] = errorpath[:]  
              raise TypeError
          a = self.__unpack__(*args, **args2) #func(a,b,c)
          self.__construct__ (*a) ##
        except AssertionError as e: 
          e.__context__ = None
          spyder.errorpath[:] = errorpath[:]
          raise e
        except Exception as e:
          exc += "\n*** (FormulaGrid2D) Value/Keyword constructor ***" + spyder.exception(newline=True)
          e.__context__ = None
          spyder.errorpath[:] = errorpath[:]
          if len(args) > 1 or len(args2) > 0 : raise e        
          try:
            a = self.__parse__(args[0]) #func("[a,b,c]")
            if a == None: return
            self.__construct__ (*a)
          except AssertionError as e: 
            e.__context__ = None
            spyder.errorpath[:] = errorpath[:]
            raise e
          except Exception as e:
            exc += "\n*** (FormulaGrid2D) Parsing constructor ***" + spyder.exception(newline=True)
            e.__context__ = None
            spyder.errorpath[:] = errorpath[:]
            try:
              a = self.__unpack__(*args[0]) #func([a,b,c])
              self.__construct__ (*a)
            except Exception as e:              
              exc += "\n*** (FormulaGrid2D) List constructor ***" + spyder.exception(newline=True)
              e.__context__ = None
              spyder.errorpath[:] = errorpath[:]
              raise spyder.ConstructionError
    except AssertionError as err:      
      spyder.errorpath[:] = errorpath[:]      
      raise_exc = str(err)          
      exctyp = type(err)
    except spyder.ConstructionError as err:      
      spyder.errorpath[:] = errorpath[:]
      raise_exc = exc
      exctyp = type(err)
    except Exception as err:      
      spyder.errorpath[:] = errorpath[:]      
      raise_exc = exc+'\n'+str(err)
      exctyp = spyder.ConstructionError
    if raise_exc: 
      raise exctyp(spyder.exception(raise_exc))
    self.validate()
    return self

  @classmethod
  def _typetree(cls): 
    """Auto-generated by Spyder:
     module core
     file typetree.py
     function typetree
    Returns the typetree of the Spyder class"""          
    spyder.core.build_members(cls.typename(),cls)
    return spyder.core.get_typetreedict(cls.typename())
  def __construct__ (self, xformula,yformula,zformula,umin,umax,usteps,vmin,vmax,vsteps,uwrap,vwrap):
    """Auto-generated by Spyder:
     module core
     file construct.py
     function generate_construct
    General private constructor, for internal use only""" 
    if self.__constructor__ == self.__defaultconstructor__:
      reconstruct = spyder.core.reconstruct_std
      reconstruct_default = spyder.core.reconstruct_std  
    else:
       reconstruct = spyder.core.reconstruct
       reconstruct_default = spyder.core.reconstruct_std
    try:
      self.xformula = reconstruct(self, String,"xformula",xformula)
    except Exception as exc:
      exc.__context__ = None; raise
    try:
      self.yformula = reconstruct(self, String,"yformula",yformula)
    except Exception as exc:
      exc.__context__ = None; raise
    try:
      self.zformula = reconstruct(self, String,"zformula",zformula)
    except Exception as exc:
      exc.__context__ = None; raise
    try:
      self.umin = reconstruct(self, Float,"umin",umin)
    except Exception as exc:
      exc.__context__ = None; raise
    try:
      self.umax = reconstruct(self, Float,"umax",umax)
    except Exception as exc:
      exc.__context__ = None; raise
    try:
      self.usteps = reconstruct(self, Integer,"usteps",usteps)
    except Exception as exc:
      exc.__context__ = None; raise
    try:
      self.vmin = reconstruct(self, Float,"vmin",vmin)
    except Exception as exc:
      exc.__context__ = None; raise
    try:
      self.vmax = reconstruct(self, Float,"vmax",vmax)
    except Exception as exc:
      exc.__context__ = None; raise
    try:
      self.vsteps = reconstruct(self, Integer,"vsteps",vsteps)
    except Exception as exc:
      exc.__context__ = None; raise
    reconstruct_func = reconstruct 
    default0 = self.__unpack2__.__defaults__[0] if spyder.python3 else self.__unpack2__.func_defaults[0]
    if uwrap is default0 or (uwrap.__class__ is default0.__class__ and uwrap == default0):      reconstruct_func = reconstruct_default
    try:
      self.uwrap = reconstruct_func(self, Bool,"uwrap",uwrap)
    except Exception as exc:
      exc.__context__ = None; raise
    reconstruct_func = reconstruct 
    default0 = self.__unpack2__.__defaults__[1] if spyder.python3 else self.__unpack2__.func_defaults[1]
    if vwrap is default0 or (vwrap.__class__ is default0.__class__ and vwrap == default0):      reconstruct_func = reconstruct_default
    try:
      self.vwrap = reconstruct_func(self, Bool,"vwrap",vwrap)
    except Exception as exc:
      exc.__context__ = None; raise
  def __unpack__(self,*args, **kwargs): 
    """Auto-generated by Spyder:
     module core
     file unpack.py
     function generate_unpack
    Private list/value/keyword constructor, for internal use only"""  
    try:
      return self.__unpack2__(*args, **kwargs)
    except TypeError as e:
      e.__context__ = None
      requiredmembers = ("xformula","yformula","zformula","umin","umax","usteps","vmin","vmax","vsteps")
      missingmembers = []
      for n in range(len(args),len(requiredmembers)):
        member = requiredmembers[n]
        if member not in kwargs: missingmembers.append(member)
      raise spyder.ConstructionError("Missing arguments: %s" %  missingmembers)
    
  def __unpack2__(self,xformula,yformula,zformula,umin,umax,usteps,vmin,vmax,vsteps,uwrap=True,vwrap=True,*_bogusargs, **_boguskwargs): 
    """Auto-generated by Spyder:
     module core
     file unpack.py
     function generate_unpack
    Private list/value/keyword constructor, for internal use only"""
    return xformula,yformula,zformula,umin,umax,usteps,vmin,vmax,vsteps,uwrap,vwrap
  def __spydercopy__(self,_a):
    """Auto-generated by Spyder:
     module core
     file copy.py
     function generate_copy
    Private copy constructor, for internal use only"""
    _missing_members = []
    try:
      xformula = _a.xformula
    except AttributeError:
      _missing_members.append('xformula')
    try:
      yformula = _a.yformula
    except AttributeError:
      _missing_members.append('yformula')
    try:
      zformula = _a.zformula
    except AttributeError:
      _missing_members.append('zformula')
    try:
      umin = _a.umin
    except AttributeError:
      _missing_members.append('umin')
    try:
      umax = _a.umax
    except AttributeError:
      _missing_members.append('umax')
    try:
      usteps = _a.usteps
    except AttributeError:
      _missing_members.append('usteps')
    try:
      vmin = _a.vmin
    except AttributeError:
      _missing_members.append('vmin')
    try:
      vmax = _a.vmax
    except AttributeError:
      _missing_members.append('vmax')
    try:
      vsteps = _a.vsteps
    except AttributeError:
      _missing_members.append('vsteps')
    uwrap = True
    if hasattr(_a,"uwrap") and _a.uwrap != None: uwrap = _a.uwrap
    vwrap = True
    if hasattr(_a,"vwrap") and _a.vwrap != None: vwrap = _a.vwrap
    if len(_missing_members): raise spyder.ConstructionError("Object '%s' has missing attributes: %s" % (type(_a).__name__, _missing_members) )
    if hasattr(_a, "__conversionstack__"): self.__conversionstack__ = _a.__conversionstack__
    return (xformula,yformula,zformula,umin,umax,usteps,vmin,vmax,vsteps,uwrap,vwrap,)
  def __copydict__(self,_a):
    """Auto-generated by Spyder:
     module core
     file copy.py
     function generate_copydict
    Private dict constructor, for internal use only"""
    _missing_members = []
    try:
      xformula = _a['xformula']
    except KeyError:
      _missing_members.append('xformula')
    except TypeError:
      raise spyder.ConstructionError("Object '%s' does not have keys" % type(_a).__name__)
    try:
      yformula = _a['yformula']
    except KeyError:
      _missing_members.append('yformula')
    except TypeError:
      raise spyder.ConstructionError("Object '%s' does not have keys" % type(_a).__name__)
    try:
      zformula = _a['zformula']
    except KeyError:
      _missing_members.append('zformula')
    except TypeError:
      raise spyder.ConstructionError("Object '%s' does not have keys" % type(_a).__name__)
    try:
      umin = _a['umin']
    except KeyError:
      _missing_members.append('umin')
    except TypeError:
      raise spyder.ConstructionError("Object '%s' does not have keys" % type(_a).__name__)
    try:
      umax = _a['umax']
    except KeyError:
      _missing_members.append('umax')
    except TypeError:
      raise spyder.ConstructionError("Object '%s' does not have keys" % type(_a).__name__)
    try:
      usteps = _a['usteps']
    except KeyError:
      _missing_members.append('usteps')
    except TypeError:
      raise spyder.ConstructionError("Object '%s' does not have keys" % type(_a).__name__)
    try:
      vmin = _a['vmin']
    except KeyError:
      _missing_members.append('vmin')
    except TypeError:
      raise spyder.ConstructionError("Object '%s' does not have keys" % type(_a).__name__)
    try:
      vmax = _a['vmax']
    except KeyError:
      _missing_members.append('vmax')
    except TypeError:
      raise spyder.ConstructionError("Object '%s' does not have keys" % type(_a).__name__)
    try:
      vsteps = _a['vsteps']
    except KeyError:
      _missing_members.append('vsteps')
    except TypeError:
      raise spyder.ConstructionError("Object '%s' does not have keys" % type(_a).__name__)
    uwrap = True
    if "uwrap" in _a: uwrap = _a["uwrap"]
    if isinstance(_a, dict) and "uwrap" in _a: uwrap = _a["uwrap"]
    vwrap = True
    if "vwrap" in _a: vwrap = _a["vwrap"]
    if isinstance(_a, dict) and "vwrap" in _a: vwrap = _a["vwrap"]
    if len(_missing_members): raise spyder.ConstructionError("Object '%s' has missing keys: %s" % (type(_a).__name__, _missing_members) )
    return (xformula,yformula,zformula,umin,umax,usteps,vmin,vmax,vsteps,uwrap,vwrap,)
  def validate(self):
    """Auto-generated by Spyder:
     module core
     file validate.py
     function generate_validate
    Validates the current object
    This is automatically called after construction
    It is NOT automatically called after editing the object"""
    try:
      pass
      self.xformula = String(self.xformula)
      self.yformula = String(self.yformula)
      self.zformula = String(self.zformula)
      self.umin = Float(self.umin)
      self.umax = Float(self.umax)
      self.usteps = Integer(self.usteps)
      self.vmin = Float(self.vmin)
      self.vmax = Float(self.vmax)
      self.vsteps = Integer(self.vsteps)
      self.uwrap = Bool(self.uwrap)
      self.vwrap = Bool(self.vwrap)
      self.__validate__()
    except Exception as inst: 
      if isinstance(inst, AssertionError) or isinstance(inst, spyder.ValidationError):
        raise 
      else:
        import traceback
        e = traceback.format_exc()
        raise spyder.ValidationError(e)
  def __validate__(self):
    """Auto-generated by Spyder:
     module core
     file validate.py
     function generate_intern_validate
    Private object validator, for internal use only"""
    xformula = self.xformula
    yformula = self.yformula
    zformula = self.zformula
    umin = self.umin
    umax = self.umax
    usteps = self.usteps
    vmin = self.vmin
    vmax = self.vmax
    vsteps = self.vsteps
    uwrap = self.uwrap
    vwrap = self.vwrap
    spyder.core._assert(self, 'umin < umax', 'assert umin < umax')
    spyder.core._assert(self, 'usteps >= 2', 'assert usteps >= 2')
    spyder.core._assert(self, 'vmin < vmax', 'assert vmin < vmax')
    spyder.core._assert(self, 'vsteps >= 2', 'assert vsteps >= 2')
    f = formula.formula(xformula,["u","v"])
    spyder.core._assert(self, 'f != None', 'assert f != None')
    spyder.core._assert(self, 'f(0,0) != None', 'assert f(0,0) != None')
    f = formula.formula(yformula,["u","v"])
    spyder.core._assert(self, 'f != None', 'assert f != None')
    spyder.core._assert(self, 'f(0,0) != None', 'assert f(0,0) != None')
    f = formula.formula(zformula,["u","v"])
    spyder.core._assert(self, 'f != None', 'assert f != None')
    spyder.core._assert(self, 'f(0,0) != None', 'assert f(0,0) != None')
  @classmethod
  def _register_errors(cls):
    """Auto-generated by Spyder:
     module core
     file validate.py
     function _register_errors
    Private class method to register error messages, for internal use only"""  
    spyder.core._register_error(cls, 'assert umin < umax', None)
    spyder.core._register_error(cls, 'assert usteps >= 2', None)
    spyder.core._register_error(cls, 'assert vmin < vmax', None)
    spyder.core._register_error(cls, 'assert vsteps >= 2', None)
    spyder.core._register_error(cls, 'assert f != None', None)
    spyder.core._register_error(cls, 'assert f(0,0) != None', None)
    spyder.core._register_error(cls, 'assert f != None', None)
    spyder.core._register_error(cls, 'assert f(0,0) != None', None)
    spyder.core._register_error(cls, 'assert f != None', None)
    spyder.core._register_error(cls, 'assert f(0,0) != None', None)
    if hasattr(cls,'_update_errors'): cls._update_errors()
  def __str__(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_str
    Converts the current object to a string
    This function is triggered by the print statement
    Redirects to self.__print__"""
    return self.__print__(0, "str")
  def str(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_str
    Converts the current object to a string
    Redirects to self.__print__"""
    return self.__print__(0, "str")
  def data(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_str
    Converts the current object to a string
    Redirects to self.__print__"""
    return self.__print__(0, "str")
  def repr(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_repr
    Converts the current object to a representation string
    As a side effect, saves all files within the object
    Redirects to self.__print__"""
    return self.__print__(0, "repr")
  def __repr__(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_repr
    Converts the current object to a representation string
    As a side effect, saves all files within the object
    Redirects to self.__print__"""
    return self.__print__(0, "repr")
  def __print__(self,spaces,mode):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_print
    Pretty-prints the current object, for internal use only"""
    ret = "%s (\n" % self.typename() 
    v = self.xformula
    if type(v) != String: v = String(v)
    ret += "%sxformula = " % ((spaces+2) * " ") + v.__print__(spaces+2, mode) + ",\n"
    v = self.yformula
    if type(v) != String: v = String(v)
    ret += "%syformula = " % ((spaces+2) * " ") + v.__print__(spaces+2, mode) + ",\n"
    v = self.zformula
    if type(v) != String: v = String(v)
    ret += "%szformula = " % ((spaces+2) * " ") + v.__print__(spaces+2, mode) + ",\n"
    v = self.umin
    if type(v) != Float: v = Float(v)
    ret += "%sumin = " % ((spaces+2) * " ") + v.__print__(spaces+2, mode) + ",\n"
    v = self.umax
    if type(v) != Float: v = Float(v)
    ret += "%sumax = " % ((spaces+2) * " ") + v.__print__(spaces+2, mode) + ",\n"
    v = self.usteps
    if type(v) != Integer: v = Integer(v)
    ret += "%susteps = " % ((spaces+2) * " ") + v.__print__(spaces+2, mode) + ",\n"
    v = self.vmin
    if type(v) != Float: v = Float(v)
    ret += "%svmin = " % ((spaces+2) * " ") + v.__print__(spaces+2, mode) + ",\n"
    v = self.vmax
    if type(v) != Float: v = Float(v)
    ret += "%svmax = " % ((spaces+2) * " ") + v.__print__(spaces+2, mode) + ",\n"
    v = self.vsteps
    if type(v) != Integer: v = Integer(v)
    ret += "%svsteps = " % ((spaces+2) * " ") + v.__print__(spaces+2, mode) + ",\n"
    v = self.uwrap
    if type(v) != Bool: v = Bool(v)
    ret += "%suwrap = " % ((spaces+2) * " ") + v.__print__(spaces+2, mode) + ",\n"
    v = self.vwrap
    if type(v) != Bool: v = Bool(v)
    ret += "%svwrap = " % ((spaces+2) * " ") + v.__print__(spaces+2, mode) + ",\n"
    ret += "%s)" % (spaces * " ")
    return ret
  def dict(self):
    """Auto-generated by Spyder:
     module core
     file dict.py
     function generate_dict
    Converts the current object to a Python dictionary"""
    _d = {}
    v = self.xformula
    if type(v) != String: v = String(v)
    _d["xformula"] = v.dict()
    v = self.yformula
    if type(v) != String: v = String(v)
    _d["yformula"] = v.dict()
    v = self.zformula
    if type(v) != String: v = String(v)
    _d["zformula"] = v.dict()
    v = self.umin
    if type(v) != Float: v = Float(v)
    _d["umin"] = v.dict()
    v = self.umax
    if type(v) != Float: v = Float(v)
    _d["umax"] = v.dict()
    v = self.usteps
    if type(v) != Integer: v = Integer(v)
    _d["usteps"] = v.dict()
    v = self.vmin
    if type(v) != Float: v = Float(v)
    _d["vmin"] = v.dict()
    v = self.vmax
    if type(v) != Float: v = Float(v)
    _d["vmax"] = v.dict()
    v = self.vsteps
    if type(v) != Integer: v = Integer(v)
    _d["vsteps"] = v.dict()
    v = self.uwrap
    if type(v) != Bool: v = Bool(v)
    _d["uwrap"] = v.dict()
    v = self.vwrap
    if type(v) != Bool: v = Bool(v)
    _d["vwrap"] = v.dict()
    return _d
  def __parse__(self, s):
    """Auto-generated by Spyder:
     module core
     file parse.py
     function generate_parse
    Parsing constructor, which redirects to spyder.core.parse"""
    p = spyder.core.parse(s, "Spyder", True)
    if type(p) == type(self):
      self.__dict__ = p.__dict__
      return None
    if isinstance(p, Object):
      a = self.__spydercopy__(p)
    else:
      assert isinstance(p, tuple) and len(p) == 2, type(p) #if not a Spyder object, spyder.core.parse should return a tuple 
      args, kwargs = p[0], p[1]
      if len(kwargs) > 0 and len(args) == 0:
        a = self.__copydict__(p[1])
      else:
        a = self.__unpack__(*p[0], **p[1])
    return a
  @classmethod
  def fromfile(c, filename, fastparse=False):
    """Auto-generated by Spyder:
     module core
     file parse.py
     function generate_parse   
    fromfile constructor"""
    n = spyder.linesep
    exc = ""
    try:
      try: #first attempt a parsing read, does not work with all data models
        s = spyder._file_load(filename).read()
        if fastparse:
          data = spyder.core.fastparse(s)
        else:
          data = spyder.core.parse(s)
        ret = c.fromdict(data[1])
      except Exception as e: 
        head = n + "### Core parser ###" + n 
        exc += head + spyder.exception()
        e.__context__ = None      
        raise
    except Exception as e: 
      try: #read using File, also works with web links
        try:
          ret = spyder.__types__["File"](filename, c).data()
        except Exception as e:
          head = n + "### Spyder.File parser ###" + n 
          exc += head + spyder.exception()
          e.__context__ = None
          raise                  
      except Exception as e:
        raise type(e)(exc)
    return ret
  def tofile(self, filename):
    """Auto-generated by Spyder:
     module core
     file parse.py
     function generate_parse      
    Saves object to file"""
    f = spyder.__types__["File"](filename, type(self), "w", self)
    f.save()
    f.close()
  def totempfile(self):
    """Auto-generated by Spyder:
     module core
     file parse.py
     function generate_parse      
    Saves object to temporary file"""
    import random, os,tempfile
    tempdir = tempfile.gettempdir()
    while 1:
      tempnam = tempdir + os.sep + str(random.randrange(1,1000000000)) +".tmp"
      if not spyder.loader.file_exists(tempnam): break
    f = spyder.__types__["File"](tempnam, type(self), "w", self)
    f.temporary(True)
    f.save()
    return f
  def __getattr__(self, method):
    """Auto-generated by Spyder:
     module core
     file convert.py
     function generate_getattr
    Invokes the conversion engine """    
    m = spyder.core.method(FormulaGrid2D, method, self)
    return m
  def convert(self, target,deepcopy=True):
    """Auto-generated by Spyder: 
     module core
     file convert.py
     function generate_convert
    Convert current object into type "target" """
    c = spyder.core.convert(FormulaGrid2D, target, self, deepcopy)
    return c
  def threadconvert(self, target, deepcopy=True):
    """Auto-generated by Spyder:
     module core
     file convert.py
     function generate_convert
    Asynchronously convert current object into type "target"
    Immediately returns a waiting handle to the result
    Use spyder.core.thread.wait_all(<list of handles>)
     or spyder.core.thread.wait_any(<list of handles>)
     to wait for the result
    """
    c = spyder.core.spyderthread.threadstart (
     spyder.core.convert, (FormulaGrid2D, target, self, deepcopy),
     name="FormulaGrid2D=>%s" % target.typename(), 
    )
    return c
  
  def __ne__(self,_a): return not self.__eq__(_a)
  def __eq__(self,_a):
    """Auto-generated by Spyder:
     module core
     file eq.py
     function generate_eq
    Comparison operator"""
    try:
      if not isinstance(_a,FormulaGrid2D) and not isinstance(self, type(_a)): return False
    except (TypeError, AttributeError, spyder.ValidationError): return False
    if _a is self: return True
    if self.xformula != _a.xformula: return False
    if self.yformula != _a.yformula: return False
    if self.zformula != _a.zformula: return False
    if self.umin != _a.umin: return False
    if self.umax != _a.umax: return False
    if self.usteps != _a.usteps: return False
    if self.vmin != _a.vmin: return False
    if self.vmax != _a.vmax: return False
    if self.vsteps != _a.vsteps: return False
    if self.uwrap != _a.uwrap: return False
    if self.vwrap != _a.vwrap: return False
    try:
      if not ThreeDee.__eq__(self, _a): return False
    except AttributeError:
      pass
    return True
  
  @classmethod
  def _form(cls):
    """Auto-generated by Spyder:
     module core
     file form.py
     function generate_form
     Returns the spyderform of the class
     This function is automatically called at class creation"""
    return spyder.core.spyderforms[cls.typename()]
  @classmethod
  def __form__(cls):
    """Auto-generated by Spyder:
     module core
     file form.py
     function generate_form
     Generates the spyderform of the class
     This function is automatically called at class creation"""
    self = spyder.core.spyderform(cls._typetree())
    xformula = self.xformula
    yformula = self.yformula
    zformula = self.zformula
    umin = self.umin
    umax = self.umax
    usteps = self.usteps
    vmin = self.vmin
    vmax = self.vmax
    vsteps = self.vsteps
    uwrap = self.uwrap
    vwrap = self.vwrap
    xformula.default = "sin(2*pi*u)*(2+(0.5*sin(2*pi*v)))"
    xformula.length = 100
    yformula.default = "cos(2*pi*u)*(2+(0.5*sin(2*pi*v)))"
    yformula.length = 100    
    zformula.default = "cos(2*pi*v)*0.5"
    zformula.length = 100
    umin.type = "number"
    umin.default = 0
    umin.min = -1000
    umin.max = 1000
    umax.type = "number"
    umax.default = 1
    umax.min = -1000
    umax.max = 1000    
    usteps.default = 64
    usteps.min = 2
    usteps.max = 10000
    vmin.type = "number"
    vmin.default = 0
    vmin.min = -1000
    vmin.max = 1000
    vmax.type = "number"
    vmax.default = 1
    vmax.min = -1000
    vmax.max = 1000  
    vsteps.default = 32  
    vsteps.min = 2
    vsteps.max = 10000    
spyder.__types__["FormulaGrid2D"] = FormulaGrid2D
spyder.core.error["FormulaGrid2D"] = {}
if hasattr(FormulaGrid2D, '_register_errors'): FormulaGrid2D._register_errors()
FormulaGrid2D._requiredmembers = [['String', 'xformula', 1], ['String', 'yformula', 2], ['String', 'zformula', 3], ['Float', 'umin', 4], ['Float', 'umax', 5], ['Integer', 'usteps', 6], ['Float', 'vmin', 7], ['Float', 'vmax', 8], ['Integer', 'vsteps', 9]]
FormulaGrid2D._defaultmembers = [['Bool', 'uwrap', 'True', 10], ['Bool', 'vwrap', 'True', 11]]
FormulaGrid2D.__form__()
ResourceFormulaGrid2D = spyder.__types__["_Resource"](FormulaGrid2D)

FormulaGrid2D.empty = functools.partial(spyder.__constructor, 
  "constructor_empty",
  FormulaGrid2D,
  "constructor_fromany",
)
FormulaGrid2D.fromlist = functools.partial(spyder.__constructor, 
  "constructor_fromlist",
  FormulaGrid2D,
  "constructor_fromany",
)
FormulaGrid2D.fromdict = functools.partial(spyder.__constructor, 
  "constructor_fromdict",
  FormulaGrid2D,
  "constructor_fromany",
)

class FormulaGrid2DArray(spyder.core.spyderlist):
  @staticmethod
  def typename(): return "FormulaGrid2DArray"
  def __spydercopy__(self,a):
    list.__init__(self, a)
    if hasattr(a, "__conversionstack__"): self.__conversionstack__ = a.__conversionstack__
 
  def repr(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_repr
    Converts the current object to a representation string
    As a side effect, saves all files within the object
    Redirects to self.__print__"""
    return self.__print__(0, "repr")
  def __repr__(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_repr
    Converts the current object to a representation string
    As a side effect, saves all files within the object
    Redirects to self.__print__"""
    return self.__print__(0, "repr")

  
  @classmethod
  def _form(cls):
    """Auto-generated by Spyder:
     module core
     file form.py
     function generate_form
     Returns the spyderform of the class
     This function is automatically called at class creation"""
    return spyder.core.spyderforms[cls.typename()]
  @classmethod
  def __form__(cls):
    """Auto-generated by Spyder:
     module core
     file form.py
     function generate_form
     Generates the spyderform of the class
     This function is automatically called at class creation"""
    spyder.core.spyderform(cls._typetree()) 
    t = cls.typename()
    while t.endswith("Array"): t = t[:-len("Array")]
    spyder.core.spyderforms[cls.typename()]._members = spyder.core.spyderforms[t]._members

  def validate(self): self.__validate__()

  def __ne__(self,_a): return not self.__eq__(_a)
  def __eq__(self,_a):
    """Auto-generated by Spyder:
     module core
     file eq.py
     function generate_eq
    Comparison operator"""
    if not isinstance(_a, FormulaGrid2DArray) and not isinstance(self, type(_a)): return False
    if _a is self: return True
    if len(self) != len(_a): return False
    for n,nn in zip(self,_a):
      if n != nn: return False
    return True

  def __str__(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_str
    Converts the current object to a string
    This function is triggered by the print statement
    Redirects to self.__print__"""
    return self.__print__(0, "str")
  def str(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_str
    Converts the current object to a string
    Redirects to self.__print__"""
    return self.__print__(0, "str")
  def data(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_str
    Converts the current object to a string
    Redirects to self.__print__"""
    return self.__print__(0, "str")


  @classmethod
  def _typetree(cls): 
    """Auto-generated by Spyder:
     module core
     file typetree.py
     function typetree
    Returns the typetree of the Spyder class"""          
    spyder.core.build_members(cls.typename(),cls)
    return spyder.core.get_typetreedict(cls.typename())

  def convert(self, target,deepcopy=True):
    c = spyder.core.convert(FormulaGrid2DArray, target, self, deepcopy)
    return c
  def threadconvert(self, target,deepcopy=True):
    c = spyder.core.spyderthread.threadstart (
     spyder.core.convert, (FormulaGrid2DArray, target, self,deepcopy),
     name="FormulaGrid2DArray=>%s" % target.typename(), 
    )
    return c    

  def __getattr__(self, method):    
      m = spyder.core.method(FormulaGrid2DArray, method, self)
      return m

  
  def list(self):
    ret = []
    for vnr in range(len(self)):
      if type(self[vnr]) != FormulaGrid2D: self[vnr] = FormulaGrid2D(self[vnr])
      ret.append(self[vnr].dict())
    return ret  
  
  def dict(self):
    return self.list()

  def __parse__(self, s):
    """Auto-generated by Spyder:
     module core
     file parse.py
     function generate_parse   
    Parsing constructor, which redirects to spyder.core.parse"""
    args = spyder.core.parse(s, "Spyder", True)
    self.__spydercopy__(args[0])
  @classmethod
  def fromfile(c, filename, fastparse=False):
    """Auto-generated by Spyder:
     module core
     file parse.py
     function generate_parse   
    fromfile constructor"""
    n = spyder.linesep
    exc = ""
    try:
      try: #first attempt a parsing read, does not work with all data models
        s = spyder._file_load(filename).read()
        if fastparse:
          data = spyder.core.fastparse(s)
        else:
          data = spyder.core.parse(s)
        ret = c.fromdict(data[1])
      except Exception as e: 
        head = n + "### Core parser ###" + n 
        exc += head + spyder.exception()
        e.__context__ = None      
        raise
    except Exception as e: 
      try: #read using File, also works with web links
        try:
          ret = spyder.__types__["File"](filename, c).data()
        except Exception as e:
          head = n + "### Spyder.File parser ###" + n 
          exc += head + spyder.exception()
          e.__context__ = None
          raise                  
      except Exception as e:
        raise type(e)(exc)
    return ret
  def tofile(self, filename):
    """Auto-generated by Spyder:
     module core
     file parse.py
     function generate_parse      
    Saves object to file"""
    f = spyder.__types__["File"](filename, type(self), "w", self)
    f.save()
    f.close()
  def totempfile(self):
    """Auto-generated by Spyder:
     module core
     file parse.py
     function generate_parse      
    Saves object to temporary file"""
    import random, os,tempfile
    tempdir = tempfile.gettempdir()
    while 1:
      tempnam = tempdir + os.sep + str(random.randrange(1,1000000000)) +".tmp"
      if not spyder.loader.file_exists(tempnam): break
    f = spyder.__types__["File"](tempnam, type(self), "w", self)
    f.temporary(True)
    f.save()
    return f

  def __arrayvalidate__(self):
    if self.__constructor__ == self.__defaultconstructor__:
      def reconstruct(classtype, index, var):
        spyder.errorpath.append((FormulaGrid2DArray, classtype,index))
        ret = classtype(var)
        spyder.errorpath.pop()
        return ret
    else:
       def reconstruct(classtype, index, var):         
         classtype.__constructor__ = self.__constructor__
         spyder.errorpath.append((FormulaGrid2DArray, classtype, index))
         try:
           ret = classtype(var)           
         finally:
           classtype.__constructor__ = self.__defaultconstructor__
         spyder.errorpath.pop()           
         return ret               
    for v in range(len(self)):
      self[v] = reconstruct(FormulaGrid2D,v,self[v])
  def __validate__(self):
    try:
      self.__arrayvalidate__()
    except AssertionError as exc:
      exc.__context__ = None
      raise AssertionError(spyder.exception())

  def __print__(self,spaces,mode):
    ret = "%s (\n" % self.typename()
    for v in self:
      ret += (spaces+2) * " " + v.__print__(spaces+2, mode) + ",\n"
    ret += spaces * " " +  ")"
    return ret

  __constructor__ = "constructor_fromany"
  __defaultconstructor__ = __constructor__
  def constructor_empty(self):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    Empty constructor, all members must be assigned manually afterwards"""
  def constructor_fromlist(self, *a):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    List constructor"""    
    errorpath = []
    errorpath[:] = spyder.errorpath[:]    
    try:
      list.__init__(self, *a)
      self.validate()
    except AssertionError as e:
      e.__context__ = None
      spyder.errorpath[:] = errorpath[:]
      raise e
    except Exception as e:
      e.__context__ = None
      spyder.errorpath[:] = errorpath[:]      
      err = str(e)
      exc = "An error has occurred in the construction of a FormulaGrid2DArray object"      
      if isinstance(e, spyder.ConstructionError):
        raise spyder.ConstructionError(spyder.exception(exc + "\n" + err))
      else:
        raise spyder.ConstructionError(exc + spyder.exception())      
    return self      
  constructor_fromdict = constructor_fromlist
  
  def __init__(self,*a, **args2):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    Init function, calls the general constructor (fromany by default)"""
    if len(args2.keys()): raise Exception          
    FormulaGrid2DArray.__dict__[FormulaGrid2DArray.__constructor__](self, *a)  
  def constructor_fromany(self, *a):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    General constructor for arrays"""    
    if len(a) == 0:
      spyder.core.spyderlist.__init__(self)
      return
    errorpath = []
    errorpath[:] = spyder.errorpath[:]          
    try:  
      try:
        if len(a) > 1: raise Exception
        if issubclass(Spyder.FormulaGrid2D, Spyder.StringLike):
          try:
            args = spyder.core.parse(a[0], "Spyder")
            if not isinstance(args, str): raise Exception
            self.__spydercopy__([args])            
            self.validate()
            return
          except:
            try:
              self.__parse__(a[0])
              self.validate()            
              return              
            except:
              pass        
        if isinstance(a[0],str) or (spyder.python3 and isinstance(a[0],bytes)): raise Exception
        spyder.errorpath[:] = errorpath[:]
        self.__spydercopy__(*a)
        self.validate()
      except AssertionError: raise
      except:        
        try:
          spyder.errorpath[:] = errorpath[:]
          self.__spydercopy__(a)
          self.validate()
        except AssertionError: raise
        except:
          spyder.errorpath[:] = errorpath[:]
          if len(a) > 1: raise Exception #
          self.__parse__(a[0])
          self.validate()
    except AssertionError as e:
      e.__context__ = None
      spyder.errorpath[:] = errorpath[:]
      raise        
    except Exception as e:
      e.__context__ = None
      spyder.errorpath[:] = errorpath[:]
      err = str(e)
      exc = "An error has occurred in the construction of a FormulaGrid2DArray object"
      if isinstance(e, spyder.ConstructionError):
        raise spyder.ConstructionError(spyder.exception(exc + "\n" + err))
      else:
        raise spyder.ConstructionError(exc + spyder.exception())      
    return self    

    
spyder.core.defineconverter("FormulaGrid2DArray","FormulaGrid2D","SPLIT")
spyder.core.defineconverter("FormulaGrid2D","FormulaGrid2DArray","CAST")
spyder.__types__["FormulaGrid2DArray"] = globals()["FormulaGrid2DArray"]  
arrayclass = spyder.__types__["FormulaGrid2DArray"]
spyder.__types__["ResourceFormulaGrid2DArray"] = spyder.__types__["_Resource"](arrayclass)
arrayclass.empty = functools.partial(spyder.__constructor, 
"constructor_empty",
arrayclass,
"constructor_fromany",
)
arrayclass.fromlist = functools.partial(spyder.__constructor, 
"constructor_fromlist",
arrayclass,
"constructor_fromany",
)
arrayclass.fromdict = functools.partial(spyder.__constructor, 
"constructor_fromdict",
arrayclass,
"constructor_fromany",
)
arrayclass.__form__()
class FormulaGrid2DArrayArray(spyder.core.spyderlist):
  @staticmethod
  def typename(): return "FormulaGrid2DArrayArray"
  def __spydercopy__(self,a):
    list.__init__(self, a)
    if hasattr(a, "__conversionstack__"): self.__conversionstack__ = a.__conversionstack__
 
  def repr(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_repr
    Converts the current object to a representation string
    As a side effect, saves all files within the object
    Redirects to self.__print__"""
    return self.__print__(0, "repr")
  def __repr__(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_repr
    Converts the current object to a representation string
    As a side effect, saves all files within the object
    Redirects to self.__print__"""
    return self.__print__(0, "repr")

  
  @classmethod
  def _form(cls):
    """Auto-generated by Spyder:
     module core
     file form.py
     function generate_form
     Returns the spyderform of the class
     This function is automatically called at class creation"""
    return spyder.core.spyderforms[cls.typename()]
  @classmethod
  def __form__(cls):
    """Auto-generated by Spyder:
     module core
     file form.py
     function generate_form
     Generates the spyderform of the class
     This function is automatically called at class creation"""
    spyder.core.spyderform(cls._typetree()) 
    t = cls.typename()
    while t.endswith("Array"): t = t[:-len("Array")]
    spyder.core.spyderforms[cls.typename()]._members = spyder.core.spyderforms[t]._members

  def validate(self): self.__validate__()

  def __ne__(self,_a): return not self.__eq__(_a)
  def __eq__(self,_a):
    """Auto-generated by Spyder:
     module core
     file eq.py
     function generate_eq
    Comparison operator"""
    if not isinstance(_a, FormulaGrid2DArrayArray) and not isinstance(self, type(_a)): return False
    if _a is self: return True
    if len(self) != len(_a): return False
    for n,nn in zip(self,_a):
      if n != nn: return False
    return True

  def __str__(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_str
    Converts the current object to a string
    This function is triggered by the print statement
    Redirects to self.__print__"""
    return self.__print__(0, "str")
  def str(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_str
    Converts the current object to a string
    Redirects to self.__print__"""
    return self.__print__(0, "str")
  def data(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_str
    Converts the current object to a string
    Redirects to self.__print__"""
    return self.__print__(0, "str")


  @classmethod
  def _typetree(cls): 
    """Auto-generated by Spyder:
     module core
     file typetree.py
     function typetree
    Returns the typetree of the Spyder class"""          
    spyder.core.build_members(cls.typename(),cls)
    return spyder.core.get_typetreedict(cls.typename())

  def convert(self, target,deepcopy=True):
    c = spyder.core.convert(FormulaGrid2DArrayArray, target, self, deepcopy)
    return c
  def threadconvert(self, target,deepcopy=True):
    c = spyder.core.spyderthread.threadstart (
     spyder.core.convert, (FormulaGrid2DArrayArray, target, self,deepcopy),
     name="FormulaGrid2DArrayArray=>%s" % target.typename(), 
    )
    return c    

  def __getattr__(self, method):    
      m = spyder.core.method(FormulaGrid2DArrayArray, method, self)
      return m

  
  def list(self):
    ret = []
    for vnr in range(len(self)):
      if type(self[vnr]) != FormulaGrid2D: self[vnr] = FormulaGrid2D(self[vnr])
      ret.append(self[vnr].dict())
    return ret  
  
  def dict(self):
    return self.list()

  def __parse__(self, s):
    """Auto-generated by Spyder:
     module core
     file parse.py
     function generate_parse   
    Parsing constructor, which redirects to spyder.core.parse"""
    args = spyder.core.parse(s, "Spyder", True)
    self.__spydercopy__(args[0])
  @classmethod
  def fromfile(c, filename, fastparse=False):
    """Auto-generated by Spyder:
     module core
     file parse.py
     function generate_parse   
    fromfile constructor"""
    n = spyder.linesep
    exc = ""
    try:
      try: #first attempt a parsing read, does not work with all data models
        s = spyder._file_load(filename).read()
        if fastparse:
          data = spyder.core.fastparse(s)
        else:
          data = spyder.core.parse(s)
        ret = c.fromdict(data[1])
      except Exception as e: 
        head = n + "### Core parser ###" + n 
        exc += head + spyder.exception()
        e.__context__ = None      
        raise
    except Exception as e: 
      try: #read using File, also works with web links
        try:
          ret = spyder.__types__["File"](filename, c).data()
        except Exception as e:
          head = n + "### Spyder.File parser ###" + n 
          exc += head + spyder.exception()
          e.__context__ = None
          raise                  
      except Exception as e:
        raise type(e)(exc)
    return ret
  def tofile(self, filename):
    """Auto-generated by Spyder:
     module core
     file parse.py
     function generate_parse      
    Saves object to file"""
    f = spyder.__types__["File"](filename, type(self), "w", self)
    f.save()
    f.close()
  def totempfile(self):
    """Auto-generated by Spyder:
     module core
     file parse.py
     function generate_parse      
    Saves object to temporary file"""
    import random, os,tempfile
    tempdir = tempfile.gettempdir()
    while 1:
      tempnam = tempdir + os.sep + str(random.randrange(1,1000000000)) +".tmp"
      if not spyder.loader.file_exists(tempnam): break
    f = spyder.__types__["File"](tempnam, type(self), "w", self)
    f.temporary(True)
    f.save()
    return f

  def __arrayvalidate__(self):
    if self.__constructor__ == self.__defaultconstructor__:
      def reconstruct(classtype, index, var):
        spyder.errorpath.append((FormulaGrid2DArrayArray, classtype,index))
        ret = classtype(var)
        spyder.errorpath.pop()
        return ret
    else:
       def reconstruct(classtype, index, var):         
         classtype.__constructor__ = self.__constructor__
         spyder.errorpath.append((FormulaGrid2DArrayArray, classtype, index))
         try:
           ret = classtype(var)           
         finally:
           classtype.__constructor__ = self.__defaultconstructor__
         spyder.errorpath.pop()           
         return ret               
    for v in range(len(self)):
      self[v] = reconstruct(FormulaGrid2DArray,v,self[v])
  def __validate__(self):
    try:
      self.__arrayvalidate__()
    except AssertionError as exc:
      exc.__context__ = None
      raise AssertionError(spyder.exception())

  def __print__(self,spaces,mode):
    ret = "%s (\n" % self.typename()
    for v in self:
      ret += (spaces+2) * " " + v.__print__(spaces+2, mode) + ",\n"
    ret += spaces * " " +  ")"
    return ret

  __constructor__ = "constructor_fromany"
  __defaultconstructor__ = __constructor__
  def constructor_empty(self):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    Empty constructor, all members must be assigned manually afterwards"""
  def constructor_fromlist(self, *a):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    List constructor"""    
    errorpath = []
    errorpath[:] = spyder.errorpath[:]    
    try:
      list.__init__(self, *a)
      self.validate()
    except AssertionError as e:
      e.__context__ = None
      spyder.errorpath[:] = errorpath[:]
      raise e
    except Exception as e:
      e.__context__ = None
      spyder.errorpath[:] = errorpath[:]      
      err = str(e)
      exc = "An error has occurred in the construction of a FormulaGrid2DArrayArray object"      
      if isinstance(e, spyder.ConstructionError):
        raise spyder.ConstructionError(spyder.exception(exc + "\n" + err))
      else:
        raise spyder.ConstructionError(exc + spyder.exception())      
    return self      
  constructor_fromdict = constructor_fromlist
  
  def __init__(self,*a, **args2):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    Init function, calls the general constructor (fromany by default)"""
    if len(args2.keys()): raise Exception          
    FormulaGrid2DArrayArray.__dict__[FormulaGrid2DArrayArray.__constructor__](self, *a)  
  def constructor_fromany(self, *a):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    General constructor for arrays"""    
    if len(a) == 0:
      spyder.core.spyderlist.__init__(self)
      return
    errorpath = []
    errorpath[:] = spyder.errorpath[:]          
    try:  
      try:
        if len(a) > 1: raise Exception
        if issubclass(Spyder.FormulaGrid2DArray, Spyder.StringLike):
          try:
            args = spyder.core.parse(a[0], "Spyder")
            if not isinstance(args, str): raise Exception
            self.__spydercopy__([args])            
            self.validate()
            return
          except:
            try:
              self.__parse__(a[0])
              self.validate()            
              return              
            except:
              pass        
        if isinstance(a[0],str) or (spyder.python3 and isinstance(a[0],bytes)): raise Exception
        spyder.errorpath[:] = errorpath[:]
        self.__spydercopy__(*a)
        self.validate()
      except AssertionError: raise
      except:        
        try:
          spyder.errorpath[:] = errorpath[:]
          self.__spydercopy__(a)
          self.validate()
        except AssertionError: raise
        except:
          spyder.errorpath[:] = errorpath[:]
          if len(a) > 1: raise Exception #
          self.__parse__(a[0])
          self.validate()
    except AssertionError as e:
      e.__context__ = None
      spyder.errorpath[:] = errorpath[:]
      raise        
    except Exception as e:
      e.__context__ = None
      spyder.errorpath[:] = errorpath[:]
      err = str(e)
      exc = "An error has occurred in the construction of a FormulaGrid2DArrayArray object"
      if isinstance(e, spyder.ConstructionError):
        raise spyder.ConstructionError(spyder.exception(exc + "\n" + err))
      else:
        raise spyder.ConstructionError(exc + spyder.exception())      
    return self    

    
spyder.core.defineconverter("FormulaGrid2DArrayArray","FormulaGrid2DArray","SPLIT")
spyder.core.defineconverter("FormulaGrid2DArray","FormulaGrid2DArrayArray","CAST")
spyder.__types__["FormulaGrid2DArrayArray"] = globals()["FormulaGrid2DArrayArray"]  
arrayclass = spyder.__types__["FormulaGrid2DArrayArray"]
spyder.__types__["ResourceFormulaGrid2DArrayArray"] = spyder.__types__["_Resource"](arrayclass)
arrayclass.empty = functools.partial(spyder.__constructor, 
"constructor_empty",
arrayclass,
"constructor_fromany",
)
arrayclass.fromlist = functools.partial(spyder.__constructor, 
"constructor_fromlist",
arrayclass,
"constructor_fromany",
)
arrayclass.fromdict = functools.partial(spyder.__constructor, 
"constructor_fromdict",
arrayclass,
"constructor_fromany",
)
arrayclass.__form__()

"""Define CoordinateGrid2D(FormulaGrid2D p) {
  vertices = []
  func1 = formula.formula(p.xformula,["u","v"])
  func2 = formula.formula(p.yformula,["u","v"])
  func3 = formula.formula(p.zformula,["u","v"])
  for u in range(p.usteps):
    curru = p.umin + float(u)/(p.usteps-1) * (p.umax - p.umin)
    for v in range(p.vsteps):
      currv = p.vmin + float(v)/(p.vsteps-1) * (p.vmax - p.vmin)
      currvertex = [func1(curru,currv),func2(curru,currv), func3(curru,currv)]
      vertices.append(currvertex)
  return CoordinateGrid2D(vertices=vertices,x=p.usteps,y=p.vsteps,xwrap=p.uwrap,ywrap=p.vwrap)
}"""
def spyderconverterfunction_19(p):
  vertices = []
  func1 = formula.formula(p.xformula,["u","v"])
  func2 = formula.formula(p.yformula,["u","v"])
  func3 = formula.formula(p.zformula,["u","v"])
  for u in range(p.usteps):
    curru = p.umin + float(u)/(p.usteps-1) * (p.umax - p.umin)
    for v in range(p.vsteps):
      currv = p.vmin + float(v)/(p.vsteps-1) * (p.vmax - p.vmin)
      currvertex = [func1(curru,currv),func2(curru,currv), func3(curru,currv)]
      vertices.append(currvertex)
  return CoordinateGrid2D(vertices=vertices,x=p.usteps,y=p.vsteps,xwrap=p.uwrap,ywrap=p.vwrap)

spyder.core.defineconverter("FormulaGrid2D","CoordinateGrid2D",spyderconverterfunction_19)

del spyderconverterfunction_19

class CoordinateGrid2D(ThreeDee):
  """Spyder-generated class

 module spyder.modules.models3d
 file 'formulagrid.spy'


  A 2D grid of 3D coordinates
  
----------------------------------------------------------------------
Spyder definition:

Type CoordinateGrid2D(ThreeDee) {
  #!#!#!
  A 2D grid of 3D coordinates
  #!#!#!
  CoordinateArray vertices
  Integer x
  Integer y
  Bool xwrap = False
  Bool ywrap = False
  Material material = "defaultmaterial"
  AxisSystem axis = AxisSystem()
  validate {
    assert x >= 2
    assert y >= 2
    assert len(vertices) == x * y
  }
}

----------------------------------------------------------------------
"""
  
  @staticmethod
  def typename():
    """Auto-generated by Spyder:
     module core
     file class.py
     function generate_class
    Return the class name of the current object"""
    return "CoordinateGrid2D"
  def cast(self, othertype):
    """Auto-generated by Spyder:
     module core
     file class.py
     function generate_class
    Return an object of the type "othertype" initialized from this object"""
    if type(othertype) == type(int): return othertype(self)    
    return globals()[othertype](self)

  __constructor__ = "constructor_fromany" #Auto-generated by Spyder
  __defaultconstructor__ = __constructor__ #Auto-generated by Spyder
  def constructor_empty(self):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    Empty constructor, all members must be assigned manually afterwards"""    
  def constructor_fromlist(self, *args, **args2):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    List constructor"""        
    errorpath = []
    errorpath[:] = spyder.errorpath[:]    
    try:
      a = self.__unpack__(*args[0])
      self.__construct__ (*a)
    except AssertionError as e: 
      e.__context__ = None
      spyder.errorpath[:] = errorpath[:]
      raise e   
    except Exception as e:
      e.__context__ = None
      spyder.errorpath[:] = errorpath[:]
      err = str(e)
      exc = "An error has occurred in the construction of a CoordinateGrid2D object"      
      if isinstance(e, spyder.ConstructionError):
        raise spyder.ConstructionError(spyder.exception(exc + "\n" + err))
      else:
        raise spyder.ConstructionError(exc + spyder.exception())            
    self.validate()      
  def constructor_fromdict(self, dic):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    Dict constructor"""           
    errorpath = []
    errorpath[:] = spyder.errorpath[:]
    try:
      a = self.__copydict__(dic)
      self.__construct__ (*a) 
    except AssertionError as e: 
      e.__context__ = None
      spyder.errorpath[:] = errorpath[:]
      raise         
    except Exception as e:
      e.__context__ = None
      spyder.errorpath[:] = errorpath[:]
      err = str(e)
      exc = "An error has occurred in the construction of a CoordinateGrid2D object"      
      if isinstance(e, spyder.ConstructionError): 
        raise spyder.ConstructionError(spyder.exception(exc + "\n" + err))
      else:
        raise spyder.ConstructionError(exc + spyder.exception())        
    self.validate()
 
  def __init__(self,*args, **args2):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    Init function, calls the general constructor (fromany by default)"""            
    CoordinateGrid2D.__dict__[CoordinateGrid2D.__constructor__](self, *args, **args2)
  def constructor_fromany(self,*args, **args2):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    General constructor for the current class
    This function tries five specialized constructors in this order:
    - Copy constructor
    - Dict constructor
    - Value/Keyword constructor
    - Parsing constructor
    - List constructor
    For more information, see the Spyder documentation"""

    errorpath = []
    errorpath[:] = spyder.errorpath[:]
    raise_exc = None
    try:
      exc = "An error has occurred in the construction of a CoordinateGrid2D object"
      exc += "\nNumber of arguments: value %d, keyword %d\n" % (len(args), len(args2))
      try:
        construct = -1
        try:
          if len(args) > 1 or len(args2) > 0: raise IndexError
          a = self.__spydercopy__(args[0]) #func(func(a,b,c))
        except AssertionError as e: 
          e.__context__ = None
          spyder.errorpath[:] = errorpath[:]
          raise e
        except Exception as e:
          if len(args) > 1 or len(args2) > 0: raise IndexError
          exc += "\n*** (CoordinateGrid2D) Copy constructor ***"+ spyder.exception(newline=True)
          e.__context__ = None
          spyder.errorpath[:] = errorpath[:]
          try:
            a = self.__copydict__(args[0]) #func({a:1,b:2,c:3})
          except Exception as e:          
            exc += "\n*** (CoordinateGrid2D) Dict constructor ***"+ spyder.exception(newline=True)
            e.__context__ = None
            spyder.errorpath[:] = errorpath[:]
            raise e
          else:
            construct = 2
        else:
          construct = 1              
        self.__construct__ (*a)
      except AssertionError as e: 
        e.__context__ = None
        spyder.errorpath[:] = errorpath[:]
        raise e
      except Exception as e:
        e.__context__ = None
        spyder.errorpath[:] = errorpath[:]
        if not (len(args) > 1 or len(args2) > 0):
          if construct == 1: exc += "\n*** (CoordinateGrid2D) Copy constructor ***" + spyder.exception(newline=True)
          if construct == 2: exc += "\n*** (CoordinateGrid2D) Dict constructor ***" + spyder.exception(newline=True)
        try:
          if len(args) == 1 and len(args2) == 0 and isinstance(args[0], str):
            if args[0].startswith("CoordinateGrid2D") and args[0][len("CoordinateGrid2D"):].lstrip()[0] == "(":
              spyder.errorpath[:] = errorpath[:]  
              raise TypeError
          a = self.__unpack__(*args, **args2) #func(a,b,c)
          self.__construct__ (*a) ##
        except AssertionError as e: 
          e.__context__ = None
          spyder.errorpath[:] = errorpath[:]
          raise e
        except Exception as e:
          exc += "\n*** (CoordinateGrid2D) Value/Keyword constructor ***" + spyder.exception(newline=True)
          e.__context__ = None
          spyder.errorpath[:] = errorpath[:]
          if len(args) > 1 or len(args2) > 0 : raise e        
          try:
            a = self.__parse__(args[0]) #func("[a,b,c]")
            if a == None: return
            self.__construct__ (*a)
          except AssertionError as e: 
            e.__context__ = None
            spyder.errorpath[:] = errorpath[:]
            raise e
          except Exception as e:
            exc += "\n*** (CoordinateGrid2D) Parsing constructor ***" + spyder.exception(newline=True)
            e.__context__ = None
            spyder.errorpath[:] = errorpath[:]
            try:
              a = self.__unpack__(*args[0]) #func([a,b,c])
              self.__construct__ (*a)
            except Exception as e:              
              exc += "\n*** (CoordinateGrid2D) List constructor ***" + spyder.exception(newline=True)
              e.__context__ = None
              spyder.errorpath[:] = errorpath[:]
              raise spyder.ConstructionError
    except AssertionError as err:      
      spyder.errorpath[:] = errorpath[:]      
      raise_exc = str(err)          
      exctyp = type(err)
    except spyder.ConstructionError as err:      
      spyder.errorpath[:] = errorpath[:]
      raise_exc = exc
      exctyp = type(err)
    except Exception as err:      
      spyder.errorpath[:] = errorpath[:]      
      raise_exc = exc+'\n'+str(err)
      exctyp = spyder.ConstructionError
    if raise_exc: 
      raise exctyp(spyder.exception(raise_exc))
    self.validate()
    return self

  @classmethod
  def _typetree(cls): 
    """Auto-generated by Spyder:
     module core
     file typetree.py
     function typetree
    Returns the typetree of the Spyder class"""          
    spyder.core.build_members(cls.typename(),cls)
    return spyder.core.get_typetreedict(cls.typename())
  def __construct__ (self, vertices,x,y,xwrap,ywrap,material,axis):
    """Auto-generated by Spyder:
     module core
     file construct.py
     function generate_construct
    General private constructor, for internal use only""" 
    if self.__constructor__ == self.__defaultconstructor__:
      reconstruct = spyder.core.reconstruct_std
      reconstruct_default = spyder.core.reconstruct_std  
    else:
       reconstruct = spyder.core.reconstruct
       reconstruct_default = spyder.core.reconstruct_std
    try:
      self.vertices = reconstruct(self, CoordinateArray,"vertices",vertices)
    except Exception as exc:
      exc.__context__ = None; raise
    try:
      self.x = reconstruct(self, Integer,"x",x)
    except Exception as exc:
      exc.__context__ = None; raise
    try:
      self.y = reconstruct(self, Integer,"y",y)
    except Exception as exc:
      exc.__context__ = None; raise
    reconstruct_func = reconstruct 
    default0 = self.__unpack2__.__defaults__[0] if spyder.python3 else self.__unpack2__.func_defaults[0]
    if xwrap is default0 or (xwrap.__class__ is default0.__class__ and xwrap == default0):      reconstruct_func = reconstruct_default
    try:
      self.xwrap = reconstruct_func(self, Bool,"xwrap",xwrap)
    except Exception as exc:
      exc.__context__ = None; raise
    reconstruct_func = reconstruct 
    default0 = self.__unpack2__.__defaults__[1] if spyder.python3 else self.__unpack2__.func_defaults[1]
    if ywrap is default0 or (ywrap.__class__ is default0.__class__ and ywrap == default0):      reconstruct_func = reconstruct_default
    try:
      self.ywrap = reconstruct_func(self, Bool,"ywrap",ywrap)
    except Exception as exc:
      exc.__context__ = None; raise
    reconstruct_func = reconstruct 
    default0 = self.__unpack2__.__defaults__[2] if spyder.python3 else self.__unpack2__.func_defaults[2]
    if material is default0 or (material.__class__ is default0.__class__ and material == default0):      reconstruct_func = reconstruct_default
    try:
      self.material = reconstruct_func(self, Material,"material",material)
    except Exception as exc:
      exc.__context__ = None; raise
    reconstruct_func = reconstruct 
    default0 = self.__unpack2__.__defaults__[3] if spyder.python3 else self.__unpack2__.func_defaults[3]
    if axis is default0 or (axis.__class__ is default0.__class__ and axis == default0):      reconstruct_func = reconstruct_default
    try:
      self.axis = reconstruct_func(self, AxisSystem,"axis",axis)
    except Exception as exc:
      exc.__context__ = None; raise
  def __unpack__(self,*args, **kwargs): 
    """Auto-generated by Spyder:
     module core
     file unpack.py
     function generate_unpack
    Private list/value/keyword constructor, for internal use only"""  
    try:
      return self.__unpack2__(*args, **kwargs)
    except TypeError as e:
      e.__context__ = None
      requiredmembers = ("vertices","x","y")
      missingmembers = []
      for n in range(len(args),len(requiredmembers)):
        member = requiredmembers[n]
        if member not in kwargs: missingmembers.append(member)
      raise spyder.ConstructionError("Missing arguments: %s" %  missingmembers)
    
  def __unpack2__(self,vertices,x,y,xwrap=False,ywrap=False,material="defaultmaterial",axis=AxisSystem(),*_bogusargs, **_boguskwargs): 
    """Auto-generated by Spyder:
     module core
     file unpack.py
     function generate_unpack
    Private list/value/keyword constructor, for internal use only"""
    return vertices,x,y,xwrap,ywrap,material,axis
  def __spydercopy__(self,_a):
    """Auto-generated by Spyder:
     module core
     file copy.py
     function generate_copy
    Private copy constructor, for internal use only"""
    _missing_members = []
    try:
      vertices = _a.vertices
    except AttributeError:
      _missing_members.append('vertices')
    try:
      x = _a.x
    except AttributeError:
      _missing_members.append('x')
    try:
      y = _a.y
    except AttributeError:
      _missing_members.append('y')
    xwrap = False
    if hasattr(_a,"xwrap") and _a.xwrap != None: xwrap = _a.xwrap
    ywrap = False
    if hasattr(_a,"ywrap") and _a.ywrap != None: ywrap = _a.ywrap
    material = "defaultmaterial"
    if hasattr(_a,"material") and _a.material != None: material = _a.material
    axis = AxisSystem()
    if hasattr(_a,"axis") and _a.axis != None: axis = _a.axis
    if len(_missing_members): raise spyder.ConstructionError("Object '%s' has missing attributes: %s" % (type(_a).__name__, _missing_members) )
    if hasattr(_a, "__conversionstack__"): self.__conversionstack__ = _a.__conversionstack__
    return (vertices,x,y,xwrap,ywrap,material,axis,)
  def __copydict__(self,_a):
    """Auto-generated by Spyder:
     module core
     file copy.py
     function generate_copydict
    Private dict constructor, for internal use only"""
    _missing_members = []
    try:
      vertices = _a['vertices']
    except KeyError:
      _missing_members.append('vertices')
    except TypeError:
      raise spyder.ConstructionError("Object '%s' does not have keys" % type(_a).__name__)
    try:
      x = _a['x']
    except KeyError:
      _missing_members.append('x')
    except TypeError:
      raise spyder.ConstructionError("Object '%s' does not have keys" % type(_a).__name__)
    try:
      y = _a['y']
    except KeyError:
      _missing_members.append('y')
    except TypeError:
      raise spyder.ConstructionError("Object '%s' does not have keys" % type(_a).__name__)
    xwrap = False
    if "xwrap" in _a: xwrap = _a["xwrap"]
    if isinstance(_a, dict) and "xwrap" in _a: xwrap = _a["xwrap"]
    ywrap = False
    if "ywrap" in _a: ywrap = _a["ywrap"]
    if isinstance(_a, dict) and "ywrap" in _a: ywrap = _a["ywrap"]
    material = "defaultmaterial"
    if "material" in _a: material = _a["material"]
    if isinstance(_a, dict) and "material" in _a: material = _a["material"]
    axis = AxisSystem()
    if "axis" in _a: axis = _a["axis"]
    if isinstance(_a, dict) and "axis" in _a: axis = _a["axis"]
    if len(_missing_members): raise spyder.ConstructionError("Object '%s' has missing keys: %s" % (type(_a).__name__, _missing_members) )
    return (vertices,x,y,xwrap,ywrap,material,axis,)
  def validate(self):
    """Auto-generated by Spyder:
     module core
     file validate.py
     function generate_validate
    Validates the current object
    This is automatically called after construction
    It is NOT automatically called after editing the object"""
    try:
      pass
      self.vertices = CoordinateArray(self.vertices)
      self.x = Integer(self.x)
      self.y = Integer(self.y)
      self.xwrap = Bool(self.xwrap)
      self.ywrap = Bool(self.ywrap)
      self.material = Material(self.material)
      self.axis = AxisSystem(self.axis)
      self.__validate__()
    except Exception as inst: 
      if isinstance(inst, AssertionError) or isinstance(inst, spyder.ValidationError):
        raise 
      else:
        import traceback
        e = traceback.format_exc()
        raise spyder.ValidationError(e)
  def __validate__(self):
    """Auto-generated by Spyder:
     module core
     file validate.py
     function generate_intern_validate
    Private object validator, for internal use only"""
    vertices = self.vertices
    x = self.x
    y = self.y
    xwrap = self.xwrap
    ywrap = self.ywrap
    material = self.material
    axis = self.axis
    spyder.core._assert(self, 'x >= 2', 'assert x >= 2')
    spyder.core._assert(self, 'y >= 2', 'assert y >= 2')
    spyder.core._assert(self, 'len(vertices) == x * y', 'assert len(vertices) == x * y')
  @classmethod
  def _register_errors(cls):
    """Auto-generated by Spyder:
     module core
     file validate.py
     function _register_errors
    Private class method to register error messages, for internal use only"""  
    spyder.core._register_error(cls, 'assert x >= 2', None)
    spyder.core._register_error(cls, 'assert y >= 2', None)
    spyder.core._register_error(cls, 'assert len(vertices) == x * y', None)
    if hasattr(cls,'_update_errors'): cls._update_errors()
  def __str__(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_str
    Converts the current object to a string
    This function is triggered by the print statement
    Redirects to self.__print__"""
    return self.__print__(0, "str")
  def str(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_str
    Converts the current object to a string
    Redirects to self.__print__"""
    return self.__print__(0, "str")
  def data(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_str
    Converts the current object to a string
    Redirects to self.__print__"""
    return self.__print__(0, "str")
  def repr(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_repr
    Converts the current object to a representation string
    As a side effect, saves all files within the object
    Redirects to self.__print__"""
    return self.__print__(0, "repr")
  def __repr__(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_repr
    Converts the current object to a representation string
    As a side effect, saves all files within the object
    Redirects to self.__print__"""
    return self.__print__(0, "repr")
  def __print__(self,spaces,mode):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_print
    Pretty-prints the current object, for internal use only"""
    ret = "%s (\n" % self.typename() 
    v = self.vertices
    if type(v) != CoordinateArray: v = CoordinateArray(v)
    ret += "%svertices = " % ((spaces+2) * " ") + v.__print__(spaces+2, mode) + ",\n"
    v = self.x
    if type(v) != Integer: v = Integer(v)
    ret += "%sx = " % ((spaces+2) * " ") + v.__print__(spaces+2, mode) + ",\n"
    v = self.y
    if type(v) != Integer: v = Integer(v)
    ret += "%sy = " % ((spaces+2) * " ") + v.__print__(spaces+2, mode) + ",\n"
    v = self.xwrap
    if type(v) != Bool: v = Bool(v)
    ret += "%sxwrap = " % ((spaces+2) * " ") + v.__print__(spaces+2, mode) + ",\n"
    v = self.ywrap
    if type(v) != Bool: v = Bool(v)
    ret += "%sywrap = " % ((spaces+2) * " ") + v.__print__(spaces+2, mode) + ",\n"
    v = self.material
    if type(v) != Material: v = Material(v)
    ret += "%smaterial = " % ((spaces+2) * " ") + v.__print__(spaces+2, mode) + ",\n"
    v = self.axis
    if type(v) != AxisSystem: v = AxisSystem(v)
    ret += "%saxis = " % ((spaces+2) * " ") + v.__print__(spaces+2, mode) + ",\n"
    ret += "%s)" % (spaces * " ")
    return ret
  def dict(self):
    """Auto-generated by Spyder:
     module core
     file dict.py
     function generate_dict
    Converts the current object to a Python dictionary"""
    _d = {}
    v = self.vertices
    if type(v) != CoordinateArray: v = CoordinateArray(v)
    _d["vertices"] = v.dict()
    v = self.x
    if type(v) != Integer: v = Integer(v)
    _d["x"] = v.dict()
    v = self.y
    if type(v) != Integer: v = Integer(v)
    _d["y"] = v.dict()
    v = self.xwrap
    if type(v) != Bool: v = Bool(v)
    _d["xwrap"] = v.dict()
    v = self.ywrap
    if type(v) != Bool: v = Bool(v)
    _d["ywrap"] = v.dict()
    v = self.material
    if type(v) != Material: v = Material(v)
    _d["material"] = v.dict()
    v = self.axis
    if type(v) != AxisSystem: v = AxisSystem(v)
    _d["axis"] = v.dict()
    return _d
  def __parse__(self, s):
    """Auto-generated by Spyder:
     module core
     file parse.py
     function generate_parse
    Parsing constructor, which redirects to spyder.core.parse"""
    p = spyder.core.parse(s, "Spyder", True)
    if type(p) == type(self):
      self.__dict__ = p.__dict__
      return None
    if isinstance(p, Object):
      a = self.__spydercopy__(p)
    else:
      assert isinstance(p, tuple) and len(p) == 2, type(p) #if not a Spyder object, spyder.core.parse should return a tuple 
      args, kwargs = p[0], p[1]
      if len(kwargs) > 0 and len(args) == 0:
        a = self.__copydict__(p[1])
      else:
        a = self.__unpack__(*p[0], **p[1])
    return a
  @classmethod
  def fromfile(c, filename, fastparse=False):
    """Auto-generated by Spyder:
     module core
     file parse.py
     function generate_parse   
    fromfile constructor"""
    n = spyder.linesep
    exc = ""
    try:
      try: #first attempt a parsing read, does not work with all data models
        s = spyder._file_load(filename).read()
        if fastparse:
          data = spyder.core.fastparse(s)
        else:
          data = spyder.core.parse(s)
        ret = c.fromdict(data[1])
      except Exception as e: 
        head = n + "### Core parser ###" + n 
        exc += head + spyder.exception()
        e.__context__ = None      
        raise
    except Exception as e: 
      try: #read using File, also works with web links
        try:
          ret = spyder.__types__["File"](filename, c).data()
        except Exception as e:
          head = n + "### Spyder.File parser ###" + n 
          exc += head + spyder.exception()
          e.__context__ = None
          raise                  
      except Exception as e:
        raise type(e)(exc)
    return ret
  def tofile(self, filename):
    """Auto-generated by Spyder:
     module core
     file parse.py
     function generate_parse      
    Saves object to file"""
    f = spyder.__types__["File"](filename, type(self), "w", self)
    f.save()
    f.close()
  def totempfile(self):
    """Auto-generated by Spyder:
     module core
     file parse.py
     function generate_parse      
    Saves object to temporary file"""
    import random, os,tempfile
    tempdir = tempfile.gettempdir()
    while 1:
      tempnam = tempdir + os.sep + str(random.randrange(1,1000000000)) +".tmp"
      if not spyder.loader.file_exists(tempnam): break
    f = spyder.__types__["File"](tempnam, type(self), "w", self)
    f.temporary(True)
    f.save()
    return f
  def __getattr__(self, method):
    """Auto-generated by Spyder:
     module core
     file convert.py
     function generate_getattr
    Invokes the conversion engine """    
    m = spyder.core.method(CoordinateGrid2D, method, self)
    return m
  def convert(self, target,deepcopy=True):
    """Auto-generated by Spyder: 
     module core
     file convert.py
     function generate_convert
    Convert current object into type "target" """
    c = spyder.core.convert(CoordinateGrid2D, target, self, deepcopy)
    return c
  def threadconvert(self, target, deepcopy=True):
    """Auto-generated by Spyder:
     module core
     file convert.py
     function generate_convert
    Asynchronously convert current object into type "target"
    Immediately returns a waiting handle to the result
    Use spyder.core.thread.wait_all(<list of handles>)
     or spyder.core.thread.wait_any(<list of handles>)
     to wait for the result
    """
    c = spyder.core.spyderthread.threadstart (
     spyder.core.convert, (CoordinateGrid2D, target, self, deepcopy),
     name="CoordinateGrid2D=>%s" % target.typename(), 
    )
    return c
  
  def __ne__(self,_a): return not self.__eq__(_a)
  def __eq__(self,_a):
    """Auto-generated by Spyder:
     module core
     file eq.py
     function generate_eq
    Comparison operator"""
    try:
      if not isinstance(_a,CoordinateGrid2D) and not isinstance(self, type(_a)): return False
    except (TypeError, AttributeError, spyder.ValidationError): return False
    if _a is self: return True
    if self.vertices != _a.vertices: return False
    if self.x != _a.x: return False
    if self.y != _a.y: return False
    if self.xwrap != _a.xwrap: return False
    if self.ywrap != _a.ywrap: return False
    if self.material != _a.material: return False
    if self.axis != _a.axis: return False
    try:
      if not ThreeDee.__eq__(self, _a): return False
    except AttributeError:
      pass
    return True
  
  @classmethod
  def _form(cls):
    """Auto-generated by Spyder:
     module core
     file form.py
     function generate_form
     Returns the spyderform of the class
     This function is automatically called at class creation"""
    return spyder.core.spyderforms[cls.typename()]
  @classmethod
  def __form__(cls):
    """Auto-generated by Spyder:
     module core
     file form.py
     function generate_form
     Generates the spyderform of the class
     This function is automatically called at class creation"""
    self = spyder.core.spyderform(cls._typetree())
spyder.__types__["CoordinateGrid2D"] = CoordinateGrid2D
spyder.core.error["CoordinateGrid2D"] = {}
if hasattr(CoordinateGrid2D, '_register_errors'): CoordinateGrid2D._register_errors()
CoordinateGrid2D._requiredmembers = [['CoordinateArray', 'vertices', 1], ['Integer', 'x', 2], ['Integer', 'y', 3]]
CoordinateGrid2D._defaultmembers = [['Bool', 'xwrap', 'False', 4], ['Bool', 'ywrap', 'False', 5], ['Material', 'material', '"defaultmaterial"', 6], ['AxisSystem', 'axis', 'AxisSystem()', 7]]
CoordinateGrid2D.__form__()
ResourceCoordinateGrid2D = spyder.__types__["_Resource"](CoordinateGrid2D)

CoordinateGrid2D.empty = functools.partial(spyder.__constructor, 
  "constructor_empty",
  CoordinateGrid2D,
  "constructor_fromany",
)
CoordinateGrid2D.fromlist = functools.partial(spyder.__constructor, 
  "constructor_fromlist",
  CoordinateGrid2D,
  "constructor_fromany",
)
CoordinateGrid2D.fromdict = functools.partial(spyder.__constructor, 
  "constructor_fromdict",
  CoordinateGrid2D,
  "constructor_fromany",
)

class CoordinateGrid2DArray(spyder.core.spyderlist):
  @staticmethod
  def typename(): return "CoordinateGrid2DArray"
  def __spydercopy__(self,a):
    list.__init__(self, a)
    if hasattr(a, "__conversionstack__"): self.__conversionstack__ = a.__conversionstack__
 
  def repr(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_repr
    Converts the current object to a representation string
    As a side effect, saves all files within the object
    Redirects to self.__print__"""
    return self.__print__(0, "repr")
  def __repr__(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_repr
    Converts the current object to a representation string
    As a side effect, saves all files within the object
    Redirects to self.__print__"""
    return self.__print__(0, "repr")

  
  @classmethod
  def _form(cls):
    """Auto-generated by Spyder:
     module core
     file form.py
     function generate_form
     Returns the spyderform of the class
     This function is automatically called at class creation"""
    return spyder.core.spyderforms[cls.typename()]
  @classmethod
  def __form__(cls):
    """Auto-generated by Spyder:
     module core
     file form.py
     function generate_form
     Generates the spyderform of the class
     This function is automatically called at class creation"""
    spyder.core.spyderform(cls._typetree()) 
    t = cls.typename()
    while t.endswith("Array"): t = t[:-len("Array")]
    spyder.core.spyderforms[cls.typename()]._members = spyder.core.spyderforms[t]._members

  def validate(self): self.__validate__()

  def __ne__(self,_a): return not self.__eq__(_a)
  def __eq__(self,_a):
    """Auto-generated by Spyder:
     module core
     file eq.py
     function generate_eq
    Comparison operator"""
    if not isinstance(_a, CoordinateGrid2DArray) and not isinstance(self, type(_a)): return False
    if _a is self: return True
    if len(self) != len(_a): return False
    for n,nn in zip(self,_a):
      if n != nn: return False
    return True

  def __str__(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_str
    Converts the current object to a string
    This function is triggered by the print statement
    Redirects to self.__print__"""
    return self.__print__(0, "str")
  def str(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_str
    Converts the current object to a string
    Redirects to self.__print__"""
    return self.__print__(0, "str")
  def data(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_str
    Converts the current object to a string
    Redirects to self.__print__"""
    return self.__print__(0, "str")


  @classmethod
  def _typetree(cls): 
    """Auto-generated by Spyder:
     module core
     file typetree.py
     function typetree
    Returns the typetree of the Spyder class"""          
    spyder.core.build_members(cls.typename(),cls)
    return spyder.core.get_typetreedict(cls.typename())

  def convert(self, target,deepcopy=True):
    c = spyder.core.convert(CoordinateGrid2DArray, target, self, deepcopy)
    return c
  def threadconvert(self, target,deepcopy=True):
    c = spyder.core.spyderthread.threadstart (
     spyder.core.convert, (CoordinateGrid2DArray, target, self,deepcopy),
     name="CoordinateGrid2DArray=>%s" % target.typename(), 
    )
    return c    

  def __getattr__(self, method):    
      m = spyder.core.method(CoordinateGrid2DArray, method, self)
      return m

  
  def list(self):
    ret = []
    for vnr in range(len(self)):
      if type(self[vnr]) != CoordinateGrid2D: self[vnr] = CoordinateGrid2D(self[vnr])
      ret.append(self[vnr].dict())
    return ret  
  
  def dict(self):
    return self.list()

  def __parse__(self, s):
    """Auto-generated by Spyder:
     module core
     file parse.py
     function generate_parse   
    Parsing constructor, which redirects to spyder.core.parse"""
    args = spyder.core.parse(s, "Spyder", True)
    self.__spydercopy__(args[0])
  @classmethod
  def fromfile(c, filename, fastparse=False):
    """Auto-generated by Spyder:
     module core
     file parse.py
     function generate_parse   
    fromfile constructor"""
    n = spyder.linesep
    exc = ""
    try:
      try: #first attempt a parsing read, does not work with all data models
        s = spyder._file_load(filename).read()
        if fastparse:
          data = spyder.core.fastparse(s)
        else:
          data = spyder.core.parse(s)
        ret = c.fromdict(data[1])
      except Exception as e: 
        head = n + "### Core parser ###" + n 
        exc += head + spyder.exception()
        e.__context__ = None      
        raise
    except Exception as e: 
      try: #read using File, also works with web links
        try:
          ret = spyder.__types__["File"](filename, c).data()
        except Exception as e:
          head = n + "### Spyder.File parser ###" + n 
          exc += head + spyder.exception()
          e.__context__ = None
          raise                  
      except Exception as e:
        raise type(e)(exc)
    return ret
  def tofile(self, filename):
    """Auto-generated by Spyder:
     module core
     file parse.py
     function generate_parse      
    Saves object to file"""
    f = spyder.__types__["File"](filename, type(self), "w", self)
    f.save()
    f.close()
  def totempfile(self):
    """Auto-generated by Spyder:
     module core
     file parse.py
     function generate_parse      
    Saves object to temporary file"""
    import random, os,tempfile
    tempdir = tempfile.gettempdir()
    while 1:
      tempnam = tempdir + os.sep + str(random.randrange(1,1000000000)) +".tmp"
      if not spyder.loader.file_exists(tempnam): break
    f = spyder.__types__["File"](tempnam, type(self), "w", self)
    f.temporary(True)
    f.save()
    return f

  def __arrayvalidate__(self):
    if self.__constructor__ == self.__defaultconstructor__:
      def reconstruct(classtype, index, var):
        spyder.errorpath.append((CoordinateGrid2DArray, classtype,index))
        ret = classtype(var)
        spyder.errorpath.pop()
        return ret
    else:
       def reconstruct(classtype, index, var):         
         classtype.__constructor__ = self.__constructor__
         spyder.errorpath.append((CoordinateGrid2DArray, classtype, index))
         try:
           ret = classtype(var)           
         finally:
           classtype.__constructor__ = self.__defaultconstructor__
         spyder.errorpath.pop()           
         return ret               
    for v in range(len(self)):
      self[v] = reconstruct(CoordinateGrid2D,v,self[v])
  def __validate__(self):
    try:
      self.__arrayvalidate__()
    except AssertionError as exc:
      exc.__context__ = None
      raise AssertionError(spyder.exception())

  def __print__(self,spaces,mode):
    ret = "%s (\n" % self.typename()
    for v in self:
      ret += (spaces+2) * " " + v.__print__(spaces+2, mode) + ",\n"
    ret += spaces * " " +  ")"
    return ret

  __constructor__ = "constructor_fromany"
  __defaultconstructor__ = __constructor__
  def constructor_empty(self):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    Empty constructor, all members must be assigned manually afterwards"""
  def constructor_fromlist(self, *a):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    List constructor"""    
    errorpath = []
    errorpath[:] = spyder.errorpath[:]    
    try:
      list.__init__(self, *a)
      self.validate()
    except AssertionError as e:
      e.__context__ = None
      spyder.errorpath[:] = errorpath[:]
      raise e
    except Exception as e:
      e.__context__ = None
      spyder.errorpath[:] = errorpath[:]      
      err = str(e)
      exc = "An error has occurred in the construction of a CoordinateGrid2DArray object"      
      if isinstance(e, spyder.ConstructionError):
        raise spyder.ConstructionError(spyder.exception(exc + "\n" + err))
      else:
        raise spyder.ConstructionError(exc + spyder.exception())      
    return self      
  constructor_fromdict = constructor_fromlist
  
  def __init__(self,*a, **args2):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    Init function, calls the general constructor (fromany by default)"""
    if len(args2.keys()): raise Exception          
    CoordinateGrid2DArray.__dict__[CoordinateGrid2DArray.__constructor__](self, *a)  
  def constructor_fromany(self, *a):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    General constructor for arrays"""    
    if len(a) == 0:
      spyder.core.spyderlist.__init__(self)
      return
    errorpath = []
    errorpath[:] = spyder.errorpath[:]          
    try:  
      try:
        if len(a) > 1: raise Exception
        if issubclass(Spyder.CoordinateGrid2D, Spyder.StringLike):
          try:
            args = spyder.core.parse(a[0], "Spyder")
            if not isinstance(args, str): raise Exception
            self.__spydercopy__([args])            
            self.validate()
            return
          except:
            try:
              self.__parse__(a[0])
              self.validate()            
              return              
            except:
              pass        
        if isinstance(a[0],str) or (spyder.python3 and isinstance(a[0],bytes)): raise Exception
        spyder.errorpath[:] = errorpath[:]
        self.__spydercopy__(*a)
        self.validate()
      except AssertionError: raise
      except:        
        try:
          spyder.errorpath[:] = errorpath[:]
          self.__spydercopy__(a)
          self.validate()
        except AssertionError: raise
        except:
          spyder.errorpath[:] = errorpath[:]
          if len(a) > 1: raise Exception #
          self.__parse__(a[0])
          self.validate()
    except AssertionError as e:
      e.__context__ = None
      spyder.errorpath[:] = errorpath[:]
      raise        
    except Exception as e:
      e.__context__ = None
      spyder.errorpath[:] = errorpath[:]
      err = str(e)
      exc = "An error has occurred in the construction of a CoordinateGrid2DArray object"
      if isinstance(e, spyder.ConstructionError):
        raise spyder.ConstructionError(spyder.exception(exc + "\n" + err))
      else:
        raise spyder.ConstructionError(exc + spyder.exception())      
    return self    

    
spyder.core.defineconverter("CoordinateGrid2DArray","CoordinateGrid2D","SPLIT")
spyder.core.defineconverter("CoordinateGrid2D","CoordinateGrid2DArray","CAST")
spyder.__types__["CoordinateGrid2DArray"] = globals()["CoordinateGrid2DArray"]  
arrayclass = spyder.__types__["CoordinateGrid2DArray"]
spyder.__types__["ResourceCoordinateGrid2DArray"] = spyder.__types__["_Resource"](arrayclass)
arrayclass.empty = functools.partial(spyder.__constructor, 
"constructor_empty",
arrayclass,
"constructor_fromany",
)
arrayclass.fromlist = functools.partial(spyder.__constructor, 
"constructor_fromlist",
arrayclass,
"constructor_fromany",
)
arrayclass.fromdict = functools.partial(spyder.__constructor, 
"constructor_fromdict",
arrayclass,
"constructor_fromany",
)
arrayclass.__form__()
class CoordinateGrid2DArrayArray(spyder.core.spyderlist):
  @staticmethod
  def typename(): return "CoordinateGrid2DArrayArray"
  def __spydercopy__(self,a):
    list.__init__(self, a)
    if hasattr(a, "__conversionstack__"): self.__conversionstack__ = a.__conversionstack__
 
  def repr(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_repr
    Converts the current object to a representation string
    As a side effect, saves all files within the object
    Redirects to self.__print__"""
    return self.__print__(0, "repr")
  def __repr__(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_repr
    Converts the current object to a representation string
    As a side effect, saves all files within the object
    Redirects to self.__print__"""
    return self.__print__(0, "repr")

  
  @classmethod
  def _form(cls):
    """Auto-generated by Spyder:
     module core
     file form.py
     function generate_form
     Returns the spyderform of the class
     This function is automatically called at class creation"""
    return spyder.core.spyderforms[cls.typename()]
  @classmethod
  def __form__(cls):
    """Auto-generated by Spyder:
     module core
     file form.py
     function generate_form
     Generates the spyderform of the class
     This function is automatically called at class creation"""
    spyder.core.spyderform(cls._typetree()) 
    t = cls.typename()
    while t.endswith("Array"): t = t[:-len("Array")]
    spyder.core.spyderforms[cls.typename()]._members = spyder.core.spyderforms[t]._members

  def validate(self): self.__validate__()

  def __ne__(self,_a): return not self.__eq__(_a)
  def __eq__(self,_a):
    """Auto-generated by Spyder:
     module core
     file eq.py
     function generate_eq
    Comparison operator"""
    if not isinstance(_a, CoordinateGrid2DArrayArray) and not isinstance(self, type(_a)): return False
    if _a is self: return True
    if len(self) != len(_a): return False
    for n,nn in zip(self,_a):
      if n != nn: return False
    return True

  def __str__(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_str
    Converts the current object to a string
    This function is triggered by the print statement
    Redirects to self.__print__"""
    return self.__print__(0, "str")
  def str(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_str
    Converts the current object to a string
    Redirects to self.__print__"""
    return self.__print__(0, "str")
  def data(self):
    """Auto-generated by Spyder:
     module core
     file print.py
     function generate_str
    Converts the current object to a string
    Redirects to self.__print__"""
    return self.__print__(0, "str")


  @classmethod
  def _typetree(cls): 
    """Auto-generated by Spyder:
     module core
     file typetree.py
     function typetree
    Returns the typetree of the Spyder class"""          
    spyder.core.build_members(cls.typename(),cls)
    return spyder.core.get_typetreedict(cls.typename())

  def convert(self, target,deepcopy=True):
    c = spyder.core.convert(CoordinateGrid2DArrayArray, target, self, deepcopy)
    return c
  def threadconvert(self, target,deepcopy=True):
    c = spyder.core.spyderthread.threadstart (
     spyder.core.convert, (CoordinateGrid2DArrayArray, target, self,deepcopy),
     name="CoordinateGrid2DArrayArray=>%s" % target.typename(), 
    )
    return c    

  def __getattr__(self, method):    
      m = spyder.core.method(CoordinateGrid2DArrayArray, method, self)
      return m

  
  def list(self):
    ret = []
    for vnr in range(len(self)):
      if type(self[vnr]) != CoordinateGrid2D: self[vnr] = CoordinateGrid2D(self[vnr])
      ret.append(self[vnr].dict())
    return ret  
  
  def dict(self):
    return self.list()

  def __parse__(self, s):
    """Auto-generated by Spyder:
     module core
     file parse.py
     function generate_parse   
    Parsing constructor, which redirects to spyder.core.parse"""
    args = spyder.core.parse(s, "Spyder", True)
    self.__spydercopy__(args[0])
  @classmethod
  def fromfile(c, filename, fastparse=False):
    """Auto-generated by Spyder:
     module core
     file parse.py
     function generate_parse   
    fromfile constructor"""
    n = spyder.linesep
    exc = ""
    try:
      try: #first attempt a parsing read, does not work with all data models
        s = spyder._file_load(filename).read()
        if fastparse:
          data = spyder.core.fastparse(s)
        else:
          data = spyder.core.parse(s)
        ret = c.fromdict(data[1])
      except Exception as e: 
        head = n + "### Core parser ###" + n 
        exc += head + spyder.exception()
        e.__context__ = None      
        raise
    except Exception as e: 
      try: #read using File, also works with web links
        try:
          ret = spyder.__types__["File"](filename, c).data()
        except Exception as e:
          head = n + "### Spyder.File parser ###" + n 
          exc += head + spyder.exception()
          e.__context__ = None
          raise                  
      except Exception as e:
        raise type(e)(exc)
    return ret
  def tofile(self, filename):
    """Auto-generated by Spyder:
     module core
     file parse.py
     function generate_parse      
    Saves object to file"""
    f = spyder.__types__["File"](filename, type(self), "w", self)
    f.save()
    f.close()
  def totempfile(self):
    """Auto-generated by Spyder:
     module core
     file parse.py
     function generate_parse      
    Saves object to temporary file"""
    import random, os,tempfile
    tempdir = tempfile.gettempdir()
    while 1:
      tempnam = tempdir + os.sep + str(random.randrange(1,1000000000)) +".tmp"
      if not spyder.loader.file_exists(tempnam): break
    f = spyder.__types__["File"](tempnam, type(self), "w", self)
    f.temporary(True)
    f.save()
    return f

  def __arrayvalidate__(self):
    if self.__constructor__ == self.__defaultconstructor__:
      def reconstruct(classtype, index, var):
        spyder.errorpath.append((CoordinateGrid2DArrayArray, classtype,index))
        ret = classtype(var)
        spyder.errorpath.pop()
        return ret
    else:
       def reconstruct(classtype, index, var):         
         classtype.__constructor__ = self.__constructor__
         spyder.errorpath.append((CoordinateGrid2DArrayArray, classtype, index))
         try:
           ret = classtype(var)           
         finally:
           classtype.__constructor__ = self.__defaultconstructor__
         spyder.errorpath.pop()           
         return ret               
    for v in range(len(self)):
      self[v] = reconstruct(CoordinateGrid2DArray,v,self[v])
  def __validate__(self):
    try:
      self.__arrayvalidate__()
    except AssertionError as exc:
      exc.__context__ = None
      raise AssertionError(spyder.exception())

  def __print__(self,spaces,mode):
    ret = "%s (\n" % self.typename()
    for v in self:
      ret += (spaces+2) * " " + v.__print__(spaces+2, mode) + ",\n"
    ret += spaces * " " +  ")"
    return ret

  __constructor__ = "constructor_fromany"
  __defaultconstructor__ = __constructor__
  def constructor_empty(self):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    Empty constructor, all members must be assigned manually afterwards"""
  def constructor_fromlist(self, *a):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    List constructor"""    
    errorpath = []
    errorpath[:] = spyder.errorpath[:]    
    try:
      list.__init__(self, *a)
      self.validate()
    except AssertionError as e:
      e.__context__ = None
      spyder.errorpath[:] = errorpath[:]
      raise e
    except Exception as e:
      e.__context__ = None
      spyder.errorpath[:] = errorpath[:]      
      err = str(e)
      exc = "An error has occurred in the construction of a CoordinateGrid2DArrayArray object"      
      if isinstance(e, spyder.ConstructionError):
        raise spyder.ConstructionError(spyder.exception(exc + "\n" + err))
      else:
        raise spyder.ConstructionError(exc + spyder.exception())      
    return self      
  constructor_fromdict = constructor_fromlist
  
  def __init__(self,*a, **args2):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    Init function, calls the general constructor (fromany by default)"""
    if len(args2.keys()): raise Exception          
    CoordinateGrid2DArrayArray.__dict__[CoordinateGrid2DArrayArray.__constructor__](self, *a)  
  def constructor_fromany(self, *a):
    """Auto-generated by Spyder:
     module core
     file init.py
     function generate_init
    General constructor for arrays"""    
    if len(a) == 0:
      spyder.core.spyderlist.__init__(self)
      return
    errorpath = []
    errorpath[:] = spyder.errorpath[:]          
    try:  
      try:
        if len(a) > 1: raise Exception
        if issubclass(Spyder.CoordinateGrid2DArray, Spyder.StringLike):
          try:
            args = spyder.core.parse(a[0], "Spyder")
            if not isinstance(args, str): raise Exception
            self.__spydercopy__([args])            
            self.validate()
            return
          except:
            try:
              self.__parse__(a[0])
              self.validate()            
              return              
            except:
              pass        
        if isinstance(a[0],str) or (spyder.python3 and isinstance(a[0],bytes)): raise Exception
        spyder.errorpath[:] = errorpath[:]
        self.__spydercopy__(*a)
        self.validate()
      except AssertionError: raise
      except:        
        try:
          spyder.errorpath[:] = errorpath[:]
          self.__spydercopy__(a)
          self.validate()
        except AssertionError: raise
        except:
          spyder.errorpath[:] = errorpath[:]
          if len(a) > 1: raise Exception #
          self.__parse__(a[0])
          self.validate()
    except AssertionError as e:
      e.__context__ = None
      spyder.errorpath[:] = errorpath[:]
      raise        
    except Exception as e:
      e.__context__ = None
      spyder.errorpath[:] = errorpath[:]
      err = str(e)
      exc = "An error has occurred in the construction of a CoordinateGrid2DArrayArray object"
      if isinstance(e, spyder.ConstructionError):
        raise spyder.ConstructionError(spyder.exception(exc + "\n" + err))
      else:
        raise spyder.ConstructionError(exc + spyder.exception())      
    return self    

    
spyder.core.defineconverter("CoordinateGrid2DArrayArray","CoordinateGrid2DArray","SPLIT")
spyder.core.defineconverter("CoordinateGrid2DArray","CoordinateGrid2DArrayArray","CAST")
spyder.__types__["CoordinateGrid2DArrayArray"] = globals()["CoordinateGrid2DArrayArray"]  
arrayclass = spyder.__types__["CoordinateGrid2DArrayArray"]
spyder.__types__["ResourceCoordinateGrid2DArrayArray"] = spyder.__types__["_Resource"](arrayclass)
arrayclass.empty = functools.partial(spyder.__constructor, 
"constructor_empty",
arrayclass,
"constructor_fromany",
)
arrayclass.fromlist = functools.partial(spyder.__constructor, 
"constructor_fromlist",
arrayclass,
"constructor_fromany",
)
arrayclass.fromdict = functools.partial(spyder.__constructor, 
"constructor_fromdict",
arrayclass,
"constructor_fromany",
)
arrayclass.__form__()

"""Define Object3D(CoordinateGrid2D g) {
  faces = []
  for currx in range(g.x):
    nextx = currx + 1
    if nextx == g.x: 
      if g.xwrap == False: continue
      nextx = 0    
    for curry in range(g.y):
      nexty = curry + 1
      if nexty == g.y: 
        if g.ywrap == False: continue
        nexty = 0    
      v1 = g.y * currx + curry
      v2 = g.y * currx + nexty      
      v3 = g.y * nextx + nexty
      v4 = g.y * nextx + curry      
      currface = [v1,v2,v3,v4]
      faces.append(currface)
  return Object3D(vertices=g.vertices,faces=faces,axis=g.axis,material=g.material)
 }"""
def spyderconverterfunction_20(g):
  faces = []
  for currx in range(g.x):
    nextx = currx + 1
    if nextx == g.x: 
      if g.xwrap == False: continue
      nextx = 0    
    for curry in range(g.y):
      nexty = curry + 1
      if nexty == g.y: 
        if g.ywrap == False: continue
        nexty = 0    
      v1 = g.y * currx + curry
      v2 = g.y * currx + nexty      
      v3 = g.y * nextx + nexty
      v4 = g.y * nextx + curry      
      currface = [v1,v2,v3,v4]
      faces.append(currface)
  return Object3D(vertices=g.vertices,faces=faces,axis=g.axis,material=g.material)

spyder.core.defineconverter("CoordinateGrid2D","Object3D",spyderconverterfunction_20)

del spyderconverterfunction_20
