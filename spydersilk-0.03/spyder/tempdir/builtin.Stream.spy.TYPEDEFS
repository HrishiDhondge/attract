662595981
4258945490
StreamArrayArray
[]
StreamArray
[]
Stream
{'validate': 'if out is not None and len(out) == 0: self.out = None\nif err is not None and len(err) == 0: self.err = None\n', 'deleted_members': [], '__init__': 'out\nerr\n', 'members': [('Data', 'out', ''), ('Data', 'err', '')], '__endclass': '  def pipe(self, cmd):\n    """Opens a pipe to system command cmd\n    self.out is sent to the pipe\'s stdin\n    Returns a Stream containing \n       the pipe\'s stdout in out \n       and self.err + the pipe\'s stderr in err\n    """\n    err = self.err\n    if self.out is None: \n      s = Stream(*pipe(cmd))\n    else:\n      s = Stream(*pipe(cmd, self.out.data()))\n    serr = s.err\n    if err is None:\n      cerr = None\n      if serr is not None: cerr = serr.data()\n    else:\n      cerr = err.data()    \n      if serr is not None: cerr += serr.data()\n    return Stream(s.out, cerr)\n  def __or__(self, cmd):\n    """Pipe operator | ; equivalent to self.pipe(...)"""\n    return self.pipe(cmd)\n  def join(self):\n    """Adds self.err to self.out"""\n    ret = Stream(self)\n    if ret.err is not None:\n      if ret.out is None: ret.out = ret.err\n      else: ret.out = Data(ret.out.data() + ret.err.data())\n      ret.err = None\n    return ret\n  def swap(self):\n    """Swaps self.out and self.err"""\n    return Stream(self.err, self.out)\n  def chomp(self):\n    """Removes trailing EOL of self.out and self.err"""\n    if self.out != None and self.out.data().endswith(\'\\n\'):\n      self.out = Data(self.out.data()[:-len(\'\\n\')])\n    if self.err != None and self.err.data().endswith(\'\\n\'):\n      self.err = Data(self.err.data()[:-len(\'\\n\')])     \n    return self\n  def lines(self):\n    """Splits self.out into lines"""\n    if self.out == None: return []\n    d = self.out.data()\n    if d.endswith(\'\\n\'): d = d[:-len(\'\\n\')]\n    return d.split(\'\\n\')\n  def textdata(self):\n    """Returns self.out.textdata()"""\n    if self.out == None: return ""\n    return self.out.textdata()\n  def data(self):\n    """Returns self.out.data()"""\n    if self.out == None: return ""\n    return self.out.data()    \n  def text(self): \n    """Returns self.out.textdata()"""\n    return self.textdata()\n  def __str__(self):\n    """if self.err is None, this is equivalent to str(self.out)"""\n    if self.out is None and self.err is None: return ""\n    if self.err is None: \n      return self.out.textdata()\n    if self.out is None:\n      return "Stream (\\n  err = \'%s\',\\n)" % (self.err.textdata())\n    return "Stream (\\n  out = \'%s\',\\n  err = \'%s\',\\n)" % (self.out.textdata(), self.err.textdata())\n'}
