# Copyright 2007-2012, Sjoerd de Vries
# This file is part of the Spyder module: "tarantula" 
# For licensing information, see LICENSE.txt 

Type Coordinate2D {
  Float x
  Float y
  form {
    x.default = 0
    y.default = 0    
    x.digits = 3
    y.digits = 3
  }
}

Type GridCoordinate2D {
  Integer x
  Integer y
}

Type Coordinate:ThreeDee {
  """Class for 3D (x,y,z) coordinates. 
    Coordinates are interpreted as x = right, y = up, z = towards the viewer
  """
  Float x
  Float y
  Float z
  form {
    x.default = 0
    y.default = 0    
    z.default = 0    
    x.digits = 3
    y.digits = 3
    z.digits = 3
  }  
  def __mul__(self, a): 
    """Multiplication with either:
      a Float (scaling)
      a Coordinate (dot product) 
      or an AxisSystem (vector-matrix multiplication)
    """
    types = (Float, Coordinate, AxisSystem)
    for t in types:  
      try:
        a = t(a)
      except:
        continue
      break
    else:
      raise TypeError("Unknown type")
    if t == Float: #scale
      return Coordinate(a*self.x,a*self.y, a*self.z)
    elif t == Coordinate: #dot product
      return a.x*self.x+a.y*self.y+a.z*self.z
    elif t == AxisSystem: #vector-matrix multiplication
      ret = Coordinate(a.origin)
      ret += self.x * a.x
      ret += self.y * a.y
      ret += self.z * a.z
      return ret
  def __rmul__(self, a):  
    """Inline multiplication"""
    return self * a
  def __truediv__(self, a):
    """Division by Float: equivalent to 1/a multiplication"""
    a = Float(a)
    return self * (1/a)
  def __div__(self, a):
    """Division by Float: equivalent to 1/a multiplication"""
    a = Float(a)
    return self * (1/a)
  def __rtruediv__(self, a):
    """Inline division by Float"""
    a = Float(a)
    return self * (1/a)
  def __rdiv__(self, a):
    """Inline division by Float"""
    a = Float(a)
    return self * (1/a)
  def size(self):
    """The scalar length of the Coordinate"""
    return sqrt(self.x**2+self.y**2+self.z**2)
  def normalize(self):
    """Re-scale the Coordinate length to 1 
    , returns Vector"""
    v = Coordinate(self)
    size = v.size()
    if size > 0: v /= size
    else: v = (1,0,0)
    return Vector(v)    
  def crossproduct(self, v):
    """Returns a Coordinate perpendicular both to this one and to v"""
    v = Coordinate(v)
    x = self.y * v.z - self.z * v.y
    y = self.z * v.x - self.x * v.z
    z = self.x * v.y - self.y * v.x
    return Coordinate(x,y,z).normalize()
  def __xor__(self,v): ## ^, cross product
    """Symbol ^, equivalent to crossproduct"""
    return self.crossproduct(v)
  def __neg__(self):
    """Negation, returns -self"""
    return type(self)(-self.x,-self.y,-self.z)
  def __add__(self, a):
    """Addition of another Coordinate"""
    a = Coordinate(a)
    return Coordinate(self.x+a.x, self.y+a.y, self.z+a.z)
  def __iadd__(self,a):
    """Inline addition"""
    self = type(self)(self + a)
    return self
  def __sub__(self,a):
    """Subtraction of another Coordinate"""
    return self + -a
  def __isub__(self,a):
    """Inline subtraction"""
    self = type(self)(self - a)
    return self
}

Type Vector:Coordinate {
  """Fork of Coordinate that ensures a length of 1"""
  Delete form
  form {
    x.min = -1
    x.max = 1
    x.default = 0
    y.min = -1
    y.max = 1
    y.default = 0    
    z.min = -1
    z.max = 1
    z.default = 0        
  }    
  validate {
    assert abs(x**2+y**2+z**2 - 1) < 0.001
  }
}

Define Vector(Coordinate) Coordinate.normalize

Type AxisSystem:ThreeDee {
  """Implementation of a coordinate system
   consisting of an origin and x,y and z axes
  """
  Coordinate origin = (0,0,0)
  Coordinate x = (1,0,0)
  Coordinate y = (0,1,0)
  Coordinate z = (0,0,1)
  def __mul__(self,a):
    """Multiplication with either:
     a Float (scaling)
     a Coordinate (vector-matrix multiplication)
     or an AxisSystem (matrix-matrix multiplication)
    """ 
    types = (Float, Coordinate, AxisSystem)
    for t in types:  
      try:
        a = t(a)
      except:
        continue
      break
    else:
      raise TypeError("Unknown type")
    if t == Float:
      ret = AxisSystem(self.origin, self.x*a, self.y*a, self.z*a)
      return ret
    if t == Coordinate:
      return t * self
    if t == AxisSystem:
      ret = AxisSystem()
      b = self
      ret.x = a.x * b.x.x + a.y * b.x.y + a.z * b.x.z 
      ret.y = a.x * b.y.x + a.y * b.y.y + a.z * b.y.z
      ret.z = a.x * b.z.x + a.y * b.z.y + a.z * b.z.z
      ret.origin = a.x * b.origin.x + a.y * b.origin.y + a.z * b.origin.z + a.origin
      return ret
  def rotateAxis(self, axis ,ang, full=False):  
    """Rotate around an arbitrary axis by an angle in degrees
    if full == True, rotate the axis origin as well """
    a = Coordinate(axis).normalize()
    x, y, z = a.x, a.y, a.z
    radang = ang/180.0 * pi
    c = cos(radang)
    s = sin(radang)
    t = 1 - c
    v1,v2,v3 = (Vector(t*x*x+c, t*x*y-s*z, t*x*z+s*y),
               Vector(t*y*x+s*z, t*y*y+c, t*y*z-s*x),
               Vector(t*x*z-s*y, t*y*z+s*x, t*z*z+c))

    mat = AxisSystem((0,0,0),v1,v2,v3)
    ret = self * mat
    self.x,self.y,self.z = ret.x,ret.y,ret.z
    if full:
      self.origin = self.origin * mat    
    return self
  def rotateX(self,ang): 
    """Rotate around the global X axis by an angle in degrees"""
    return self.rotateAxis((1,0,0),ang)
  def rotateY(self,ang): 
    """Rotate around the global Y axis by an angle in degrees"""
    return self.rotateAxis((0,1,0),ang)
  def rotateZ(self,ang): 
    """Rotate around the global Z axis by an angle in degrees"""
    return self.rotateAxis((0,0,1),ang)
  def rotateXFull(self,ang): 
    """Rotate around the global X axis by an angle in degrees
     and rotate the axis origin as well"""
    return self.rotateAxis((1,0,0),ang,True)
  def rotateYFull(self,ang): 
    """Rotate around the global Y axis by an angle in degrees
     and rotate the axis origin as well"""
    return self.rotateAxis((0,1,0),ang,True)
  def rotateZFull(self,ang): 
    """Rotate around the global Z axis by an angle in degrees
     and rotate the axis origin as well"""
    return self.rotateAxis((0,0,1),ang,True)
  def rotateLocalX(self,ang): 
    """Rotate around the local X axis by an angle in degrees"""
    return self.rotateAxis(self.x,ang)
  def rotateLocalY(self,ang): 
    """Rotate around the local Y axis by an angle in degrees"""
    return self.rotateAxis(self.y,ang)
  def rotateLocalZ(self,ang): 
    """Rotate around the local Z axis by an angle in degrees"""
    return self.rotateAxis(self.z,ang)
  def rotateLocalXFull(self,ang): 
    """Rotate around the local X axis by an angle in degrees
     and rotate the axis origin as well"""
    return self.rotateAxis(self.x,ang,True)
  def rotateLocalYFull(self,ang): 
    """Rotate around the local Y axis by an angle in degrees
     and rotate the axis origin as well"""
    return self.rotateAxis(self.y,ang,True)
  def rotateLocalZFull(self,ang): 
    """Rotate around the local Z axis by an angle in degrees
     and rotate the axis origin as well"""
    return self.rotateAxis(self.z,ang,True)
  form {
    self.subtype = "column"
  }
}

Method matrix(AxisSystem) axissystem_to_matrix """Generate a C double[16] object that contains the axis system in 4x4 matrix form"""

Type Edge3D {
  """Edge class, should be part of a class that defines vertices
  Consists of two vertex indices and a crease parameter
  A higher crease parameter indicates edge sharpness
  """
  Integer v1
  Integer v2
  Integer crease = 0
  validate {
    assert crease >= 0 and crease < 256
  }
}

Type Face3D {
  """Face class, should be part of a class that defines vertices and materials
  Material definition is optional; 
   if none is defined, the material of the parent class should be used
  Looking from the outside, vertices should be specified counter-clockwise
  If specified, the normal should point inward
  Normals for every vertex can be specified, too (for smooth lighting)
  Texture coordinates are not yet implemented in Tarantula
  """
  IntegerArray vertices
  *Material material
  *Coordinate2DArray texturecoords
  *Vector normal
  *VectorArray vertexnormals
  validate {
    assert texturecoords == None or len(texturecoords) == len(vertices)
    assert vertexnormals == None or len(vertexnormals) == len(vertices)
  }
}

Type Polygon:ThreeDee {
  """Self-contained class for polygon data
  Looking from the outside, vertices should be specified counter-clockwise
  If specified, the normal should point inward
  Normals for every vertex can be specified, too (for smooth lighting)
  If a material other than "defaultmaterial" is used, 
   it must be elsewhere defined and show()'ed as a NewMaterial
  Texture coordinates are not yet implemented in Tarantula
  """
  CoordinateArray vertices
  Material material = "defaultmaterial"
  AxisSystem axis = AxisSystem()
  *CoordinateArray texturecoords
  *Vector normal
  *VectorArray vertexnormals
  validate {
    assert texturecoords == None or len(texturecoords) == len(vertices)
    assert vertexnormals == None or len(vertexnormals) == len(vertices)
  }
  length {
    return len(vertices)
  }
}

Type Vertex:Coordinate {
  *Coordinate2D texturecoords
}

Type Object3D:ThreeDee {
  """Self-contained class for 3D object (mesh) data
  Every face contains indices that point to a vertex in "vertices"
  If a material other than "defaultmaterial" is used, 
   it must be elsewhere defined and show()'ed as a NewMaterial
  Edge specification is fully optional
  """
  VertexArray vertices = []
  Face3DArray faces = []
  Material material = "defaultmaterial"
  AxisSystem axis = AxisSystem()
  Edge3DArray edges = [] 
  Enum lighting("smooth", "flat") = "flat"
}

Type Block3D:ThreeDee {
  """Class for rectangular blocks"""
  Coordinate dimensions
  Material material = "defaultmaterial"
  AxisSystem axis = AxisSystem()
  Enum pivot("center", "corner") = "center"
  form {
    self.matrix = "axis"
    dimensions.default = Coordinate(1,1,1)
  }
}

Define Block3D(Block3DArray) SPLIT

Type Circle:ThreeDee {
  Float radius
  Coordinate origin
  Material material = "defaultmaterial"
  Vector normal = (0,0,1)
}

Type Circle16:Circle {}
Type Circle32:Circle {}
Type Circle64:Circle {}

Define Circle64(Circle) CAST

Type Cylinder:ThreeDee {
  """Defines a cylinder with its symmetry axis defined as axis.z
   and going through axis.origin
  The cylinder can be scaled using radius and height, 
   or by scaling axis.x/y/z
  """
  Float radius
  Float height
  AxisSystem axis = AxisSystem()
  Material material = "defaultmaterial"
}

Type Cylinder16:Cylinder {}
Type Cylinder32:Cylinder {}
Type Cylinder64:Cylinder {}
Define Cylinder32(Cylinder) CAST

Define Object3D(Circle16) drawCircle16
Define Object3D(Circle32) drawCircle32
Define Object3D(Circle64) drawCircle64

Define Object3D(Cylinder16) drawCylinder16
Define Object3D(Cylinder32) drawCylinder32
Define Object3D(Cylinder64) drawCylinder64

Define Object3D(Object3DArray) SPLIT

Type DisplayList {
  """If objects are show()'ed in Tarantula, 
   an integer OpenGL display list is typically returned.
   This class specifies a display list to be 
    show()'ed again, multiplied with an AxisSystem
  """
  Integer displaylist
  AxisSystem axis = AxisSystem()
}

Type MultiDisplayList {
  """If objects are show()'ed in Tarantula, 
   an integer OpenGL display list is typically returned.
  This calss specifies duplicates of a displaylist, 
  each with its own AxisSystem. 
  The displaylist is rendered with for every
  instance, its axis system applied to it."""
  Integer displaylist
  AxisSystemArray instances
}

Define Object3D(Block3D) makeBlock
Define PolygonArray(Object3D) untieObject
Define Polygon(PolygonArray) SPLIT
Define Vector(Coordinate a) {
  return a.normalize()
}

Define MultiInstance3D(ObjectGroup3D og) {
  if len(og.group) != 1: return None
  if og.group[0].typename() != "MultiInstance3D": return None
  ret = MultiInstance3D(og.group[0])
  for nr in range(len(ret.instances)):
    ret.instances[nr] = AxisSystem(ret.instances[nr] * og.axis)
  return ret
}

