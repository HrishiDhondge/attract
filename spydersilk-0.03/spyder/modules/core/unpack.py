# Copyright 2007-2011, Sjoerd de Vries
# This file is part of the Spyder module: "core" 
# For licensing information, see LICENSE.txt 

def generate_unpack(typename, parentnames, source, members, deleted_members, block):
  if block != None: raise Exception
  if len(members) == 0: return None,None  
  requiredmembers, defaultmembers, optionalmembers, args, allargs = spyder.core.parse_members(typename,members,None, spyder.safe_eval)
  req = ",".join(['"'+v[1]+'"' for v in requiredmembers])
  if len(requiredmembers) == 1: req += ","
  s = """  def __unpack__(self,*args, **kwargs): 
    \"\"\"Auto-generated by Spyder:
     module core
     file unpack.py
     function generate_unpack
    Private list/value/keyword constructor, for internal use only\"\"\"  
    try:
      return self.__unpack2__(*args, **kwargs)
    except TypeError as e:
      e.__context__ = None
      requiredmembers = (%s)
      missingmembers = []
      for n in range(len(args),len(requiredmembers)):
        member = requiredmembers[n]
        if member not in kwargs: missingmembers.append(member)
      raise spyder.ConstructionError("Missing arguments: %%s" %%  missingmembers)
    
  def __unpack2__(self,%s,*_bogusargs, **_boguskwargs): 
    \"\"\"Auto-generated by Spyder:
     module core
     file unpack.py
     function generate_unpack
    Private list/value/keyword constructor, for internal use only\"\"\"
""" % (req, args)
  if len(members) == 0:
      s += "    pass\n"
  else:
    if len(members) == 1:
        s += "    return (%s,)\n" % allargs
    else: s += "    return %s\n" % allargs
  return s,None
 
spyder.defineunimethod("__unpack__", generate_unpack)
