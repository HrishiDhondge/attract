# Copyright 2007-2011, Sjoerd de Vries
# This file is part of the Spyder module: "core" 
# For licensing information, see LICENSE.txt 

def generate_dict(typename, parentnames, source, members, deleted_members, block):
  if block != None: raise Exception
  requiredmembers, defaultmembers, optionalmembers, args, allargs = spyder.core.parse_members(typename,members,None, spyder.safe_eval)
  s = """  def dict(self):
    \"\"\"Auto-generated by Spyder:
     module core
     file dict.py
     function generate_dict
    Converts the current object to a Python dictionary\"\"\"
"""  
  s += "    _d = {}\n"
  for m in members:
    mm = m[1]
    for n in range(0,len(mm)):
      c = mm[n]
      if c == "=":
        mm = mm[:n].rstrip()
        break
      elif c == "'" or c == "\"": break
    s += "    v = self.%s\n" % mm
    spaces = 0
    if mm in optionalmembers:
      s += "    if v != None:\n"
      spaces = 2
    s += "    %sif type(v) != %s: v = %s(v)\n" % (spaces * " ", m[0], m[0]) 
    s += "    %s_d[\"%s\"] = v.dict()\n" % (spaces * " ", mm) 
  s += "    return _d\n"
  arraycode = """  
  def list(self):
    ret = []
    for vnr in range(len(self)):
      if type(self[vnr]) != %s: self[vnr] = %s(self[vnr])
      ret.append(self[vnr].dict())
    return ret  
  
  def dict(self):
    return self.list()
""" % (typename, typename)
  if len(members) == 0: return None,arraycode    
  return s, arraycode

spyder.defineunimethod("dict", generate_dict)
