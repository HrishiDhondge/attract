# Copyright 2007-2011, Sjoerd de Vries
# This file is part of the Spyder module: "core" 
# For licensing information, see LICENSE.txt 

def generate_validate(typename, parentnames, source, members, deleted_members, block):
  requiredmembers, defaultmembers, optionalmembers, args, allargs = spyder.core.parse_members(typename,members,None, spyder.safe_eval)  
  if block != None: raise Exception
  s = """  def validate(self):
    \"\"\"Auto-generated by Spyder:
     module core
     file validate.py
     function generate_validate
    Validates the current object
    This is automatically called after construction
    It is NOT automatically called after editing the object\"\"\"
"""
  s += "    try:\n      pass\n"
  for m in requiredmembers:
    s += "      self.%s = %s(self.%s)\n" % (m[1],m[0],m[1])
  for m in defaultmembers:
    if m[1] not in optionalmembers:
      s += "      self.%s = %s(self.%s)\n" % (m[1],m[0],m[1])
  s += "      self.__validate__()\n"
  s += """    except Exception as inst: 
      if isinstance(inst, AssertionError) or isinstance(inst, spyder.ValidationError):
        raise 
      else:
        import traceback
        e = traceback.format_exc()
        raise spyder.ValidationError(e)
"""
  arraycode = "  def validate(self): self.__validate__()\n"
  if len(members) == 0 and not len(parentnames): 
    return None,arraycode    
  return s,arraycode

def generate_intern_validate(typename, parentnames, source, members, deleted_members, block):
  requiredmembers, defaultmembers, optionalmembers, args, allargs = spyder.core.parse_members(typename,members,None, spyder.safe_eval)  
  s = """  def __validate__(self):
    \"\"\"Auto-generated by Spyder:
     module core
     file validate.py
     function generate_intern_validate
    Private object validator, for internal use only\"\"\"
"""
  s2 = """  @classmethod
  def _register_errors(cls):
    \"\"\"Auto-generated by Spyder:
     module core
     file validate.py
     function _register_errors
    Private class method to register error messages, for internal use only\"\"\"  
"""
  if block == None:
    s += "    pass\n"
  else:
    ss = ""
    for m in requiredmembers:
      ss += "    %s = self.%s\n" % (m[1],m[1])
    for m in defaultmembers:
      ss += "    %s = self.%s\n" % (m[1],m[1])      
    spaces = None
    for l in block.split('\n'):
      if len(l.strip()) == 0: continue
      if spaces is None:
        spaces = len(l) - len(l.lstrip())
        s += ss
      line = l[spaces:].rstrip()
      err = None
      if line.find("raise ") > -1: err = "raise"
      elif line.find("assert ") > -1: err = "assert"
      if err is not None:
        replaced_line, error_reg = insert_error(line, err)
        s2 += "    %s\n" % error_reg
        line = replaced_line
      s += "    %s\n" % line    
    if spaces == -1: s += "    pass\n"

  s2 += "    if hasattr(cls,'_update_errors'): cls._update_errors()\n"
  arraycode = """  def __arrayvalidate__(self):
    if self.__constructor__ == self.__defaultconstructor__:
      def reconstruct(classtype, index, var):
        spyder.errorpath.append((%(classname)s, classtype,index))
        ret = classtype(var)
        spyder.errorpath.pop()
        return ret
    else:
       def reconstruct(classtype, index, var):         
         classtype.__constructor__ = self.__constructor__
         spyder.errorpath.append((%(classname)s, classtype, index))
         try:
           ret = classtype(var)           
         finally:
           classtype.__constructor__ = self.__defaultconstructor__
         spyder.errorpath.pop()           
         return ret               
    for v in range(len(self)):
      self[v] = reconstruct(%(prevclassname)s,v,self[v])
  def __validate__(self):
    try:
      self.__arrayvalidate__()
    except AssertionError as exc:
      exc.__context__ = None
      raise AssertionError(spyder.exception())
"""
  if len(members) == 0 and not len(parentnames): return None,arraycode    
  return s+s2,arraycode

spyder.defineunimethod("__validate__", generate_validate)
spyder.defineunimethod("validate", generate_intern_validate)
#NOTE that they are swapped, to send "validate" block to "__validate__" function,
# and make constant "validate" function not to accept blocks!


