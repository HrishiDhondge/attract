# Copyright 2007-2011, Sjoerd de Vries
# This file is part of the Spyder module: "core" 
# For licensing information, see LICENSE.txt 

"""
The conversion stack is a global, thread-specific variable, shared as spyder.core.__conversionstack__.
This variable is reset at the beginning of each conversion
This stack is a list of the conversions that the currently converted Spyder object has undergone
In case of SPLIT conversions, it is the index of the object in the list from which it originates

After conversion, the list is added to the Spyder object under object.__conversionstack__
This is mainly for the convenience of methods that operate on the derived object
(i.e) BArray.show() that is expanded to B=>A, A.show(), so that the methods know the original object
"""

def generate_getattr(typename, parentnames, source, members, deleted_members, block):
  if block != None: raise Exception
  s = """  def __getattr__(self, method):
    \"\"\"Auto-generated by Spyder:
     module core
     file convert.py
     function generate_getattr
    Invokes the conversion engine \"\"\"    
    m = spyder.core.method(%s, method, self)
    return m
""" % typename
  arraycode = """  def __getattr__(self, method):    
      m = spyder.core.method(%(classname)s, method, self)
      return m
""" 
  return s,arraycode

def generate_convert(typename, parentnames, source, members, deleted_members, block):
  if block != None: raise Exception
  s = """  def convert(self, target,deepcopy=True):
    \"\"\"Auto-generated by Spyder: 
     module core
     file convert.py
     function generate_convert
    Convert current object into type "target" \"\"\"
    c = spyder.core.convert(%s, target, self, deepcopy)
    return c
  def threadconvert(self, target, deepcopy=True):
    \"\"\"Auto-generated by Spyder:
     module core
     file convert.py
     function generate_convert
    Asynchronously convert current object into type \"target\"
    Immediately returns a waiting handle to the result
    Use spyder.core.thread.wait_all(<list of handles>)
     or spyder.core.thread.wait_any(<list of handles>)
     to wait for the result
    \"\"\"
    c = spyder.core.spyderthread.threadstart (
     spyder.core.convert, (%s, target, self, deepcopy),
     name="%s=>%%s" %% target.typename(), 
    )
    return c
  
""" % (typename, typename, typename)
  arraycode = """  def convert(self, target,deepcopy=True):
    c = spyder.core.convert(%(classname)s, target, self, deepcopy)
    return c
  def threadconvert(self, target,deepcopy=True):
    c = spyder.core.spyderthread.threadstart (
     spyder.core.convert, (%(classname)s, target, self,deepcopy),
     name="%(classname)s=>%%s" %% target.typename(), 
    )
    return c    
"""
  if len(members) == 0: return None,arraycode  
  return s,arraycode

spyder.defineunimethod("__getattr__", generate_getattr)
spyder.defineunimethod("convert", generate_convert)
thread = spyder.newnamespace()
thread.wait_all = spyderthread.wait_all 
thread.wait_any = spyderthread.wait_any

__conversionstack__ = spyderthread.spythreadlist()
