# Copyright 2007-2011, Sjoerd de Vries
# This file is part of the Spyder module: "core" 
# For licensing information, see LICENSE.txt 

def reconstruct_std(self, classtype, member, var):
  spyder.errorpath.append((type(self),classtype,member))
  ret = classtype(var)
  spyder.errorpath.pop()
  return ret
  
def reconstruct(self, classtype, member, var):         
  classtype.__constructor__ = self.__constructor__
  spyder.errorpath.append((type(self),classtype,member))
  try:
    ret = classtype(var)
  finally:  
    classtype.__constructor__ = self.__defaultconstructor__
  spyder.errorpath.pop()  
  return ret         
    
def generate_construct(typename, parentnames, source, members, deleted_members, block):
  if len(members) == 0: return None,None
  requiredmembers, defaultmembers, optionalmembers, args, allargs = spyder.core.parse_members(typename,members,None, spyder.safe_eval)

  s =  """  def __construct__ (self, %s):
    \"\"\"Auto-generated by Spyder:
     module core
     file construct.py
     function generate_construct
    General private constructor, for internal use only\"\"\" 
    if self.__constructor__ == self.__defaultconstructor__:
      reconstruct = spyder.core.reconstruct_std
      reconstruct_default = spyder.core.reconstruct_std  
    else:
       reconstruct = spyder.core.reconstruct
       reconstruct_default = spyder.core.reconstruct_std
""" % allargs
  for m in requiredmembers:
      s += "    try:\n"
      s += "      self.%s = reconstruct(self, %s,\"%s\",%s)\n" % (m[1], m[0], m[1], m[1])
      s += "    except Exception as exc:\n"
      s += "      exc.__context__ = None; raise\n"
  for mnr, m in enumerate(defaultmembers):
    if m[1] in optionalmembers:
      s += "    self.%s = None\n" % (m[1])
      s += "    try:\n"
      s += "      if %s is not None: self.%s = reconstruct(self, %s,\"%s\",%s)\n" % (m[1], m[1], m[0], m[1], m[1])
      s += "    except Exception as exc:\n"
      s += "      exc.__context__ = None; raise\n"
      
    else:
      s += "    reconstruct_func = reconstruct \n"
      s += "    default0 = self.__unpack2__.__defaults__[%d] if spyder.python3 else self.__unpack2__.func_defaults[%d]\n" % (mnr, mnr)
      s += "    if %s is default0 or (%s.__class__ is default0.__class__ and %s == default0):" % (m[1], m[1], m[1])      
      s += "      reconstruct_func = reconstruct_default\n" 
      s += "    try:\n"
      s += "      self.%s = reconstruct_func(self, %s,\"%s\",%s)\n" % (m[1],m[0],m[1],m[1])
      s += "    except Exception as exc:\n"
      s += "      exc.__context__ = None; raise\n"

  if len(members) == 0: s += "    pass\n"
  return s, None
  
spyder.defineunimethod("__construct__", generate_construct)
